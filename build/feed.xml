<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robot Librarian</title>
    <description>Stuff about computers in libraries, and libraries in computers
</description>
    <link>http://robotlibrarian.billdueber.com/</link>
    <atom:link href="http://robotlibrarian.billdueber.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 03 Oct 2014 16:16:30 -0400</pubDate>
    <lastBuildDate>Fri, 03 Oct 2014 16:16:30 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>&quot;Schemaless&quot; solr with dynamicField and copyField</title>
        <description>&lt;p&gt;[Holy Kamoly, it’s been a long time since I blogged!]&lt;/p&gt;

&lt;p&gt;Recent versions of &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;solr&lt;/a&gt; have the option to run in what they call &lt;a href=&quot;https://cwiki.apache.org/confluence/display/solr/Schemaless+Mode&quot;&gt;“schemaless mode”&lt;/a&gt;, wherein fields that aren’t recognized are actually added, automatically, to the schema as real named fields.&lt;/p&gt;

&lt;p&gt;I find this intruguing, but it’s not what I’m after right now.&lt;/p&gt;

&lt;p&gt;The problem I’m in the first stages of addressing is that my &lt;code&gt;schema.xml&lt;/code&gt; is huge mess – very little consistency, no naming conventions dictating what’s stored/indexed, etc. It grew “ogranically” (which is what people say when they mean they were lazy and sloppy) and needs a full-on reorganization.&lt;/p&gt;

&lt;p&gt;The way people tend to address this is with strict naming conventions (possibly using &lt;a href=&quot;https://cwiki.apache.org/confluence/display/solr/Dynamic+Fields&quot;&gt;dynamicField&lt;/a&gt;s) and judicious use of [copyField](https://cwiki.apache.org/confluence/display/solr/Copying+Fields() directives. The &lt;a href=&quot;http://projecthydra.org/&quot;&gt;Project Hydra&lt;/a&gt; folks have &lt;a href=&quot;https://github.com/projecthydra/hydra/wiki/Solr-Schema&quot;&gt;a nice, straightforward system&lt;/a&gt; for how they set up dynamic fields.&lt;/p&gt;

&lt;h2 id=&quot;indexed-xor-stored&quot;&gt;Indexed XOR Stored?&lt;/h2&gt;

&lt;p&gt;The more I thought about it, the more I wondered whether it might be useful to have a &lt;em&gt;strict separation of stored and indexed fields&lt;/em&gt;. Indexed fields would be named with an appropriate suffix, so you know how they’ve been analyzed. And stored fields would have pleasant, human-readable names to make them easy to deal with for consuming applications.&lt;/p&gt;

&lt;p&gt;What I &lt;em&gt;think&lt;/em&gt; I’d like is a system where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All stored fields have ‘bare’ names (e.g., ‘title’, not ‘title_t’ or ‘title_s’)&lt;/li&gt;
  &lt;li&gt;All indexed fields are typed according to their name (so I know ‘title_t’ is an indexed field of type “text”)&lt;/li&gt;
  &lt;li&gt;Separation of stored and indexed fields – a field is either stored or indexed, but not both.&lt;/li&gt;
  &lt;li&gt;A “schemaless” setup, where I don’t need to define all (any of?) my fields in my schema and reboot solr when I make a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be clear: I’m not sure this is a great way to go as of yet. But I figured out what I think is a good way to do it, should it turn out to be worthwhile.&lt;/p&gt;

&lt;h2 id=&quot;part-1-dynamic-fields&quot;&gt;Part 1: Dynamic Fields&lt;/h2&gt;

&lt;p&gt;Solr allows one to define dynamic fields – a field whose type is determined by a glob-match on its name. Instead of explicitly naming your field in your schema, you can do something like:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dynamicField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_is&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;multiValued&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…to indicate that any unrecognized field whose name ends in &lt;code&gt;_is&lt;/code&gt; will treated as an indexed, stored integer.&lt;/p&gt;

&lt;p&gt;Dynamic Field definitions are processed in order of declaration; first one wins. That allows you to define a “default” as the very last &lt;code&gt;dynamicField&lt;/code&gt; that matches &lt;em&gt;anything&lt;/em&gt; (e.g., &lt;code&gt;*&lt;/code&gt;). The &lt;code&gt;schema.xml&lt;/code&gt; that ships with Solr suggests that you can use this functionality to just ignore unrecognized fields.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dynamicField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ignored&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;multiValued&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But that gives me an idea.&lt;/p&gt;

&lt;h2 id=&quot;part-2-copy-fields&quot;&gt;Part 2: Copy Fields&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;copyField&lt;/code&gt; directive allows you to index the same text into multiple fields (presumably with different analysis chains). Index data into one field, it automatically gets copied into another.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;field&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;field&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title_l&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text_leftanchored&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title_l&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this case, even though I only send a &lt;code&gt;title&lt;/code&gt;, the indexed field &lt;code&gt;title_l&lt;/code&gt; will automatically be created and available for me to search against. Nice.&lt;/p&gt;

&lt;h2 id=&quot;part-3-copy-field-with-globs&quot;&gt;Part 3: Copy Field with globs&lt;/h2&gt;

&lt;p&gt;But it gets better. You can have globs (&lt;code&gt;*&lt;/code&gt;) in your copyField source or destination attributes.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#777&quot;&gt;&amp;lt;!-- Copy all text fields (those that end in &#39;_t&#39;) into &#39;keywords&#39; --&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;keywords&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So that’s nice. But what if you have globs in both the source and the destination? The docs say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The copyField command can use a wildcard (*) character in the dest parameter only if the source parameter contains one as well. copyField uses the matching glob from the source field for the dest field name into which the source content is copied.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmmmmm….&lt;/p&gt;

&lt;h2 id=&quot;part-4-putting-it-all-together&quot;&gt;Part 4: Putting it all together&lt;/h2&gt;

&lt;p&gt;Once I read that, I thought, “Huh. I’m hungry.”&lt;/p&gt;

&lt;p&gt;But after lunch, I thought, “Maybe I can do something with this.”&lt;/p&gt;

&lt;p&gt;Here’s what I came up with.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dynamicField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t_s&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;multiValued&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dynamicField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t_s&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*_t_s&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;&amp;lt;!-- The default: a multivalued, stored, non-indexed string --&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dynamicField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;indexed&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;stored&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;multiValued&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s walk through that.&lt;/p&gt;

&lt;p&gt;First, there are two &lt;code&gt;dynamicField&lt;/code&gt; definitions. The first is a no-op: unstored, unindexed. We use it only for copying. The second is a standard indexed (but not stored) text field.&lt;/p&gt;

&lt;p&gt;Then come the &lt;code&gt;copyField&lt;/code&gt;s, where we match on the suffixes of the field types.&lt;br /&gt;
Finally, we have our default: a stored, unindexed string. (Note that when Solr stores a value, it stores whatever you put into it, not the value after analysis – same as a String does anyway).&lt;/p&gt;

&lt;p&gt;Suppose I index an undeclared field called &lt;code&gt;title_t_s&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;title_t_s&lt;/code&gt; matches the first &lt;code&gt;dynamicField&lt;/code&gt; declaration. This specific field is ignored (no indexing, no storing), but the text sent to it remains available for further processing by the &lt;code&gt;copyField&lt;/code&gt;s.&lt;/li&gt;
  &lt;li&gt;The first &lt;code&gt;copyField&lt;/code&gt; matches, and copies the text into newly-generated field formed by what matched the &lt;code&gt;*&lt;/code&gt; in the source field, followed by &lt;code&gt;_t&lt;/code&gt;. That’s &lt;code&gt;title&lt;/code&gt;, so we get &lt;code&gt;title_t&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The newly-minted &lt;code&gt;title_t&lt;/code&gt; field is also unrecognized, but it matches the &lt;em&gt;second&lt;/em&gt; &lt;code&gt;dynamicField&lt;/code&gt; and is thus assigned to be an indexed text field.&lt;/li&gt;
  &lt;li&gt;Meanwhile, the second &lt;code&gt;copyField&lt;/code&gt; &lt;em&gt;also&lt;/em&gt; matches our original &lt;code&gt;title_t_s&lt;/code&gt;. It uses what matched against the &lt;code&gt;*&lt;/code&gt; in the source (&lt;code&gt;title&lt;/code&gt;, again) to create a new field just called &lt;code&gt;title&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now we have a new field called &lt;code&gt;title&lt;/code&gt; not matching any declared field, so it runs down the list of &lt;code&gt;dynamicField&lt;/code&gt; definitions until it hits our stopgap at the end: a stored, nonindexed string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what we end up with field-wise is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;title_t_s&lt;/code&gt; disappearing into the ether. It’s just gone.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;title_t&lt;/code&gt;, an indexed text field&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt;, a stored string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I can run searches against &lt;code&gt;title_t&lt;/code&gt;, but my document will have a nice stored string in it just called &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-this-is-probably-a-bad-idea&quot;&gt;Why this is probably a bad idea.&lt;/h2&gt;

&lt;p&gt;Depending on how crazy you want to get options-wise (multi-valued or not, termVectors or not, etc.) you can get a combinatorial explosion on the number of &lt;code&gt;dynamicField&lt;/code&gt;/&lt;code&gt;copyField&lt;/code&gt; sets you need to generate. But that’s not the real problem.&lt;/p&gt;

&lt;p&gt;The real problem is that you don’t have &lt;em&gt;any&lt;/em&gt; intrinsic documentation of what your index looks like. None. You can’t even look at the indexing code, because it’ll look like you’re sending a document with a field called &lt;code&gt;title_t_s&lt;/code&gt; and that field is nowhere to be found.&lt;/p&gt;

&lt;p&gt;So, like I said: interesting, but by no means the obvious way to go. Still, I’m sure I’ll have some variant of this in my schema when it comes time for me to reboot the library catalog.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2014/10/schemaless-solr-with-dynamicfield-and-copyfield/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2014/10/schemaless-solr-with-dynamicfield-and-copyfield/</guid>
        
        <category>solr</category>
        
        
      </item>
    
      <item>
        <title>Help me test yet another LC Callnumber parser</title>
        <description>&lt;p&gt;Those who have followed this blog and my code for a while know that I have a &lt;a href=&quot;http://robotlibrarian.billdueber.com/normalizing-loc-call-numbers-for-sorting/&quot;&gt;long&lt;/a&gt;, slightly &lt;a href=&quot;http://robotlibrarian.billdueber.com/enough-with-the-freakin-lc-call-number-normalization/&quot;&gt;sad&lt;/a&gt;, and borderline &lt;a href=&quot;https://github.com/billdueber/lib.umich.edu-solr-stuff&quot;&gt;abusive&lt;/a&gt; relationship with Library of Congress call numbers.&lt;/p&gt;

&lt;p&gt;They’re a freakin’ nightmare. They just are.&lt;/p&gt;

&lt;p&gt;But, based on the premise that Sisyphus was a quitter, I took another stab at it, this time writing a real (PEG-) parser instead of trying to futz with extended regular expressions.&lt;/p&gt;

&lt;p&gt;The results, so far, aren’t too bad.&lt;/p&gt;

&lt;p&gt;The gem is called &lt;a href=&quot;https://github.com/billdueber/lc_callnumber&quot;&gt;lc_callnumber&lt;/a&gt;, but more importantly, I’ve put together a little heroku app to let you play with it, and then correct any incorrect parses (or tell me that it worked correctly) to build up a test suite.&lt;/p&gt;

&lt;p&gt;So…&lt;a href=&quot;https://lccparser.herokuapp.com/&quot;&gt;Please try to break my LC Callnumber parser&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;[Code for the app itself is &lt;a href=&quot;https://github.com/billdueber/lccparser&quot;&gt;on github&lt;/a&gt;; pull requests for both the app and the gem joyously received]&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jan 2014 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2014/01/yet-another-lc-callnumber-parser.html/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2014/01/yet-another-lc-callnumber-parser.html/</guid>
        
        
      </item>
    
      <item>
        <title>New blog front- and back-end</title>
        <description>&lt;p&gt;A while back, &lt;a href=&quot;http://dreamhost.com/&quot;&gt;Dreamhost&lt;/a&gt; had some problems and my blog and assorted other websites I help keep track of went down.&lt;/p&gt;

&lt;p&gt;For more than two weeks.&lt;/p&gt;

&lt;p&gt;Now, I understand that crap happens. And I understand that sometimes lots of things happen at once. But fundamentally, their infrastructure is such that they could lose everything on a machine and be unable to get it back for more than two weeks. I’m not a mathematician, but that’s not “five-nine” service.&lt;/p&gt;

&lt;p&gt;So, I decided to start hunting around for another provider. And then I got distracted by the idea that maybe having my blog in &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; was more trouble than it was worth. There’s something to be said for simplicity, especially since all I really wanted to do is throw up posts written in markdown with code samples.&lt;/p&gt;

&lt;p&gt;I got a few pointers toward using &lt;a href=&quot;http://middlemanapp.com/&quot;&gt;middleman&lt;/a&gt;, a pre-processor that takes in almost anything and produces regular css/html. Between that and &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt; for the comments, well, this just seems easier. And now that I’ve put in the effort, it’ll be easier to actually get blog posts up, most importantly, move it over when I find a new hosting provider.&lt;/p&gt;

&lt;p&gt;Feel free to tell me how ugly it is and suggest improvements. I have the design skills of a one-eyed poodle.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Dec 2013 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2013/12/new-blog-front-and-back-end.html/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2013/12/new-blog-front-and-back-end.html/</guid>
        
        
      </item>
    
      <item>
        <title>Announcing &quot;traject&quot; indexing software</title>
        <description>&lt;p&gt;[Over the next few days I’ll be writing a series of posts that highlight a new indexing solution by Jonathan Rochkind and myself called &lt;code&gt;traject&lt;/code&gt; that we’re using to index MARC data into Solr. This is the introduction.]&lt;/p&gt;

&lt;p&gt;Wow. Six months since I posted here. What have I been doing?&lt;/p&gt;

&lt;p&gt;Well, mostly parenting, but in the last few weeks I was lucky enough to get on board with a project started by &lt;a href=&quot;http://bibwild.wordpress.com/&quot;&gt;Jonathan Rochkind&lt;/a&gt; for a new JRuby-based tool optimized for indexing MARC data into solr. You know, kinda like solrmarc, but JRuby.&lt;/p&gt;

&lt;h3 id=&quot;whats-it-look-like&quot;&gt;What’s it look like?&lt;/h3&gt;

&lt;p&gt;I encourage you to take a look at a &lt;a href=&quot;https://github.com/traject-project/traject_sample&quot;&gt;little sample setup&lt;/a&gt; I put together for instructional purposes. It’s based on the HathiTrust catalog indexing scheme and shows off about 85% of what &lt;code&gt;traject&lt;/code&gt; can do. Clone it and go through the README and the two indexing files to get a taste of how things are put together.&lt;/p&gt;

&lt;p&gt;Real quickly, though, here’s a sample configuration file to pull out the ID, title, and authors (if any) out of a file of MARC records and send them to a file as JSON object, one record per line (i.e., newline-delimited JSON)&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
&lt;span style=&quot;color:#777&quot;&gt;# we&#39;ll pretend this file is called &#39;sample.rb&#39;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;traject&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;traject/marc_reader&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;traject/json_writer&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;


&lt;span style=&quot;color:#777&quot;&gt;# It&#39;s just ruby, so I can have comments!&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;# Here we set up which reader/writer to use and so on&lt;/span&gt;
settings &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
  provide &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reader_class_name&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Traject::MarcReader&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  provide &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;writer_class_name&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Traject::JsonWriter&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  provide &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;output_file&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;basics.ndj&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  provide &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;processing_thread_pool&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;


&lt;span style=&quot;color:#777&quot;&gt;# It&#39;s *still* just ruby, so I can declare a variable!&lt;/span&gt;
idfield = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;001&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;# ...and then use it to find the ID&lt;/span&gt;
to_field &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, extract_marc(idfield, &lt;span style=&quot;color:#A60&quot;&gt;:first&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;)

&lt;span style=&quot;color:#777&quot;&gt;# Now the other data&lt;/span&gt;
to_field &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, extract_marc(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;245&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
to_field &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;author&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, extract_marc(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;100abcd:110abcd:111abc&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)


&lt;span style=&quot;color:#777&quot;&gt;# You&#39;d run this as:&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;#    traject -c sample.rb myfile.mrc&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s simplistic, of course, but it should drive home the point that we strove to make sure traject &lt;em&gt;makes the easy stuff easy&lt;/em&gt;.  For a more complex example, look at &lt;a href=&quot;https://github.com/traject-project/traject_sample/blob/master/index.rb&quot;&gt;the heavily-annotated index.rb file&lt;/a&gt; in the sample project.&lt;/p&gt;

&lt;h3 id=&quot;why-use-or-move-to-traject&quot;&gt;Why use (or move to) traject?&lt;/h3&gt;

&lt;p&gt;First off, you can and should look at &lt;a href=&quot;http://bibwild.wordpress.com/2013/10/14/traject-marc-solr-indexer-release/&quot;&gt;the annoucement&lt;/a&gt; and/or &lt;a href=&quot;https://github.com/traject-project/traject/&quot;&gt;the README&lt;/a&gt; for a longer answer, but I’ll tell you why &lt;em&gt;I&lt;/em&gt; use &lt;code&gt;traject&lt;/code&gt; in one word:&lt;/p&gt;

&lt;p&gt;Flexibility.&lt;/p&gt;

&lt;p&gt;After a year or so of struggling with &lt;a href=&quot;https://code.google.com/p/solrmarc/&quot;&gt;solrmarc&lt;/a&gt; (often due to my lack of Java-fu), and then even more years after that using my own, home-grown &lt;a href=&quot;https://github.com/billdueber/marc2solr&quot;&gt;marc2solr&lt;/a&gt;, the things I most wanted were the ability to decouple the various components from each other, rely on code instead of configuration, and basically just know that I can up the complexity of my code without paying an enormous price.&lt;/p&gt;

&lt;p&gt;I’m fast wtih Ruby. And the architecture of &lt;code&gt;traject&lt;/code&gt; allows me to easily build and test my transformations in isolation, with tools I’m good with, with debugging output that’s easy to read or process by machine or inspection.&lt;/p&gt;

&lt;h3 id=&quot;what-does-it-have-out-of-the-box&quot;&gt;What does it have out of the box?&lt;/h3&gt;

&lt;p&gt;One advantage &lt;code&gt;traject&lt;/code&gt; has that my previous system didn’t is, well, years of struggling with my previous system. I’ve learned a lot about what I need, what needs to be easy, and how I want to think about indexing.&lt;/p&gt;

&lt;p&gt;The nature of &lt;code&gt;traject&lt;/code&gt; is that “a reader” sends “a record” to “an indexer” which produces a key=&amp;gt;value hash and sends &lt;em&gt;that&lt;/em&gt; to “a writer.” Obviously, this is a pretty abstract setup; it’s not hard to see how it could be used for all sorts of transformations (e.g., I’m already thinking about a simple gem that would provide macros to index CSV or tab-delmited files into Solr. Or maybe going to/from a database).&lt;/p&gt;

&lt;p&gt;But Jonathan and I are, mostly, stuck dealing with MARC data and Solr. So here’s what we get:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readers&lt;/strong&gt;: MARC readers for MARC21 binary and MARC-XML based on both ruby-marc and marc4j (the latter allowing you to deal with encoding transformations and the like). An NDJ reader (for one marc-in-json structure per line in a file – that’s what we use in for the HathiTrust). And we’ve already got a couple gems for people with other needs: &lt;a href=&quot;https://github.com/traject-project/traject_alephsequential_reader&quot;&gt;traject_alephsequential_reader&lt;/a&gt; for those that need to deal with AlephSequential, and Jonathan’s new &lt;a href=&quot;https://github.com/jrochkind/traject_horizon&quot;&gt;horizon reader&lt;/a&gt; for efficiently pulling records right out of your Horizon ILS, if you happen to run one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transforming Macros&lt;/strong&gt;: A traject indexing step is just a well-formed ruby block (or lambda), which makes writing macros ridiculously easy. Traject ships with most of what you’d commonly need to deal with MARC: extracting data based on tag/subfield/indicators (or substring of a fixed field), dealing with non-filing characters, automatically dealing with 880 linked fields. Mucking with publication dates. Dealing with languages, formats, etc. And, of course, doing it all with multiple threads, because who wants to see all those lovely cores go to waste?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writers&lt;/strong&gt;: Of course, you can write to solr, using the excellent &lt;code&gt;solrj&lt;/code&gt; java library. And you can do it in multiple threads, to keep things fast. But there’s also the &lt;code&gt;DebugWriter&lt;/code&gt; to spit stuff out in a human-readable format, and the &lt;code&gt;JsonWriter&lt;/code&gt; mentioned above to spit stuff out in a &lt;em&gt;machine&lt;/em&gt;-readable format. And building your own writer is literally just a couple methods.&lt;/p&gt;

&lt;h3 id=&quot;how-do-i-get-a-taste&quot;&gt;How do I get a taste?&lt;/h3&gt;

&lt;p&gt;Like I said, clone and play with &lt;a href=&quot;https://github.com/traject-project/traject_sample&quot;&gt;the sample project&lt;/a&gt;. And ask me questions, either here or via email. After years of being the only person running my indexing software, I’m anxious to try to build up a community around &lt;code&gt;traject&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2013 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2013/10/announcing-traject-indexing-software/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2013/10/announcing-traject-indexing-software/</guid>
        
        
      </item>
    
      <item>
        <title>Come work at the University of Michigan</title>
        <description>&lt;p&gt;The Library has three UX positions available right now – interface designer, interface developer, and a web content strategist.&lt;/p&gt;

&lt;p&gt;Come join me at what is easily the best place I’ve ever worked! &lt;a href=&quot;http://userslib.com/2013/04/16/ux-and-web-systems-job-postings-at-the-university-of-michigan-library/&quot;&gt;Full details are over at Suz’s blog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Apr 2013 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2013/04/come-work-at-the-university-of-michigan/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2013/04/come-work-at-the-university-of-michigan/</guid>
        
        
      </item>
    
      <item>
        <title>Please: don&#39;t return your books</title>
        <description>&lt;p&gt;So, I’m at &lt;a href=&quot;http://code4lib.org/conference/2013&quot;&gt;code4lib 2013&lt;/a&gt; right now, where side conversations and informal exchanges tend to be the most interesting part.&lt;/p&gt;

&lt;p&gt;Last night I had an conversation with the inimitable &lt;a href=&quot;https://twitter.com/mbklein&quot;&gt;Michael B. Klein&lt;/a&gt;, and after complaining about faculty members that keep books out for &lt;em&gt;decades&lt;/em&gt; at a time, we ended up asking a simple question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How much more shelving would we need if everyone returned their books?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming we could get them all checked in and such, well, where would we put them?&lt;/p&gt;

&lt;p&gt;I’m looking at this in the simplest, most conservative way possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assume they’re all paperbacks, so we don’t worry about how thick a cover is (cover width = 0)&lt;/li&gt;
  &lt;li&gt;Assume items for which we don’t have page count information are “average”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;starting-data&quot;&gt;Starting data&lt;/h3&gt;

&lt;p&gt;What’s my current situation at Michigan?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Total bibs: about 10M (but that includes a bunch of HathiTrust items and other electronic-only items that could never be checked out)&lt;/li&gt;
  &lt;li&gt;Total items checked out right now: 162,080&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first problem I run into is that I don’t know how many pages are in a given book. Well, in theory I can look in MARC field 300$a, and it will tell me.&lt;/p&gt;

&lt;h3 id=&quot;finding-the-number-of-pages-in-a-book&quot;&gt;Finding the number of pages in a book&lt;/h3&gt;

&lt;p&gt;I went through a recent dump of all our records and pulled out page counts from the 300 (those that matched the regular expression $$a\d+\s+[pP].).&lt;/p&gt;

&lt;p&gt;Problem solved, right? Well, kind of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3,085,433 total bibs with page count data (about 30%)&lt;/li&gt;
  &lt;li&gt;40,872 checked out items with page count data (about 25%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, so I don’t have data for everything. Plus, some of those are multi-volume works that list the total page count, even though only a single volume may be checked out.&lt;/p&gt;

&lt;p&gt;We’ll have to drop down into statistics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Average number of pages in a checked-out item: 270&lt;/li&gt;
  &lt;li&gt;Median number of pages in a checked-out item: 244&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The median is lower, so we’ll go with that. Being conservative, remember?&lt;/p&gt;

&lt;h3 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;/h3&gt;

&lt;p&gt;Obviously we need to make a lot of assumptions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All paperbacks (== no space allowance for covers)&lt;/li&gt;
  &lt;li&gt;244 pages per item (the median of checked out items for which we have data)&lt;/li&gt;
  &lt;li&gt;Pages = 244 * 162,080 = 39,547,520 pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sowhats-the-damage&quot;&gt;So…what’s the damage?&lt;/h3&gt;

&lt;p&gt;But how to do the calculation?&lt;/p&gt;

&lt;p&gt;It turns out that simply googling &lt;a href=&quot;https://www.google.com/search?num=30&amp;amp;hl=en&amp;amp;safe=off&amp;amp;tbo=d&amp;amp;noj=1&amp;amp;site=webhp&amp;amp;source=hp&amp;amp;q=book+spine+width+calculator&amp;amp;oq=book+spine+widt&quot;&gt;book spine width calculator&lt;/a&gt; a few come up.&lt;/p&gt;

&lt;p&gt;I picked one and input 39,547,520 pages and assumed 50lb paper (the lightest paper in the tool).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total width: 77,241.25 inches, or 6437 feet, or 1.22 miles&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;miles&quot;&gt;1.22 miles???&lt;/h3&gt;

&lt;p&gt;Well, we had a lot of assumptions,but most of them were pretty conservative. And I have no idea if the book spine calculator is at all accurate.&lt;/p&gt;

&lt;p&gt;But…it’s gonna be a big number no matter what. Add in that many of them are hardcover, and this seems like a pretty good guess at a lower end.&lt;/p&gt;

&lt;h3 id=&quot;what-is-this-good-for-again&quot;&gt;What is this good for again?&lt;/h3&gt;

&lt;p&gt;Oh, nothing at all. Just a little fun while I’m at code4lib.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;Well, the best next step would be to walk away. This is a huge waste of time.&lt;/p&gt;

&lt;p&gt;But…we could look in the 020s for a hint of whether it’s hardcover or paperback (which is &lt;a href=&quot;http://robotlibrarian.billdueber.com/isbn-parenthetical-notes-bad-marc-data-1/&quot;&gt;really hard&lt;/a&gt;. And maybe try to figure out if multiple volumes of a multi-volume work are all checked out and take that into account.&lt;/p&gt;

&lt;p&gt;But really: this is enough for me. Whether Michael wants to pursue it further on his own, well, that’s up to him.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2013 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2013/02/please-dont-return-your-books/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2013/02/please-dont-return-your-books/</guid>
        
        
      </item>
    
      <item>
        <title>Boosting on Exactish (anchored) phrase matching in Solr: (SST #4)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;http://robotlibrarian.billdueber.com/stupid-solr-tricks-introduction/&quot;&gt;introduction to the Stupid Solr Tricks series&lt;/a&gt; if you’re just joining us.]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Exact&lt;/em&gt; matching in Solr is easy. Use the default &lt;em&gt;string&lt;/em&gt; type: all it does is, essentially, exact phrase matching. &lt;em&gt;string&lt;/em&gt; is a great type for faceted values, where the only way we expect to search the index is via text pulled from the index itself. Query the index to get a value: use that value to re-query the index. Simple and self-contained.&lt;/p&gt;

&lt;p&gt;But much of the time, we don’t want exact matching. We want &lt;em&gt;exactish&lt;/em&gt; matching. You know, where things are exactly the same &lt;em&gt;except&lt;/em&gt;. Except for case, or punctuation, or how much whitespace is between tokens. Maybe do some unicode folding, or stemming.&lt;/p&gt;

&lt;p&gt;Essentially, we want to reward users (via high relevancy) for getting &lt;em&gt;really close&lt;/em&gt;. If someone types in a full title, but misses a colon, well, let’s go  ahead and assume they want that particular item.&lt;/p&gt;

&lt;h3 id=&quot;exactish-matching-vs-phrase-matching&quot;&gt;&lt;em&gt;Exactish&lt;/em&gt; matching vs phrase matching&lt;/h3&gt;

&lt;p&gt;Phrase matching in Solr does a great job, but fails those of us generating super-complex queries where we want to provide awesome service for those users doing &lt;em&gt;known-item queries&lt;/em&gt;. If someone puts in the exact(ish) title, or the exact(ish) subject, well, those items should float to the top.&lt;/p&gt;

&lt;p&gt;Solr’s default phrase matching (via, say, the &lt;code&gt;pf&lt;/code&gt; param in dismax or just putting your query in quotes) doesn’t differentiate between a phrase that matches the whole target string and only part of that target string. For this, we’ll need a decent text &lt;code&gt;fieldtype&lt;/code&gt; and a way to “anchor” the search to both ends of the target string.&lt;/p&gt;

&lt;h3 id=&quot;our-goals&quot;&gt;Our goals&lt;/h3&gt;

&lt;p&gt;We’re shooting for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A useful text type that we can use all over the place&lt;/li&gt;
  &lt;li&gt;A phrase match against that field that will match any portion of the target text. Solr already does this – that’s a normal Solr phrase search.&lt;/li&gt;
  &lt;li&gt;A “fully anchored” text type that will only phrase match if the query string exactishly-matches the whole field. We’ll phrase-search on this field and boost it way up.&lt;/li&gt;
  &lt;li&gt;And, what the heck, a left-anchored version that will exactish match a phrase only at the start of a field. We’ll boost this one up a bit less.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;follow-along-at-home&quot;&gt;Follow along at home&lt;/h3&gt;

&lt;p&gt;Go ahead and clone the &lt;a href=&quot;https://billdueber@github.com/billdueber/solr_stupid_tricks&quot;&gt;github repo&lt;/a&gt; I’ve been using  if you haven’t already and let’s dig in.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
cd solr_stupid_tricks
git pull origin master
git fetch --all
git checkout SST4
java -jar start.jar &amp;amp;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are some additions to the &lt;code&gt;schema.xml&lt;/code&gt; file; let’s take a look!&lt;/p&gt;

&lt;h3 id=&quot;step-1-get-a-decent-text-type&quot;&gt;Step 1: get a decent text type&lt;/h3&gt;

&lt;p&gt;The recent-nighty of Solr 3.x we’re using has a great tokenizer in ICUTokenizerFactory, which does “the right thing” across a whole host of languages.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;fieldtype&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.TextField&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;positionIncrementGap&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.ICUTokenizerFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.ICUFoldingFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.SynonymFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;synonyms&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;syn.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;ignoreCase&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;expand&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;&amp;lt;!-- &amp;lt;filter class=&amp;quot;solr.WordDelimiterFilterFactory&amp;quot;
             generateWordParts=&amp;quot;1&amp;quot; generateNumberParts=&amp;quot;1&amp;quot;
             catenateWords=&amp;quot;1&amp;quot; catenateNumbers=&amp;quot;1&amp;quot; catenateAll=&amp;quot;0&amp;quot;/&amp;gt; --&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.CJKWidthFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.CJKBigramFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/fieldtype&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Let’s take it bit by bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Obviously, start with the &lt;code&gt;ICUTokenizer&lt;/code&gt; with a large positionIncrementGap so we can do some of the tricks we talked about &lt;a href=&quot;http://robotlibrarian.billdueber.com/requiringpreferring-searches-that-dont-span-multiple-values-sst-3/&quot;&gt;last time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Next, we get one-stop shopping with the &lt;code&gt;ICUFoldingFilterFactory&lt;/code&gt;. It provides all of the following:
    &lt;ul&gt;
      &lt;li&gt;NFKC normalization (precomosing),&lt;/li&gt;
      &lt;li&gt;Unicode case folding (i.e., lowercasing)&lt;/li&gt;
      &lt;li&gt;search term folding (removing accents, etc).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push in synonyms if you have any&lt;/li&gt;
  &lt;li&gt;Uncomment the &lt;code&gt;WordDelimiterFilterFactory&lt;/code&gt; if you want to. I’m going to try to avoid it, since it messes with the number of tokens midstream and I worry about the effect on dismax and its &lt;code&gt;mm&lt;/code&gt; parameter as &lt;a href=&quot;http://bibwild.wordpress.com/2011/06/15/more-dismax-gotchas-varying-field-analysis-and-mm/&quot;&gt;explained so excellently by Jonathan Rochkind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hathitrust.org/blogs/large-scale-search/multilingual-issues-part-1-word-segmentation&quot;&gt;Dealing with CJK (Chinese, Japanese, Korean) is hard&lt;/a&gt;. The CJK filters process those languages and provide overlapping bigrams so searching isn’t (I’m told) quite as painful. (I really, really recommend the above link for a great overview by Tom Burton-West).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-2-set-up-parallel-text-types-that-anchor-phrase-matches-to-one-or-both-ends&quot;&gt;Step 2: Set up parallel text types that anchor phrase matches to one or both ends&lt;/h3&gt;

&lt;p&gt;We’re going to use something new: a &lt;code&gt;charFilter&lt;/code&gt;. This differs from a normal filter in that it affects the input string before tokenization.&lt;/p&gt;

&lt;p&gt;Here’s the trick. We’re going to add anchoring text (I chose just ‘AAAA’ at the front and ‘ZZZZ’ at the end) to the normal text type, just by adding a simple charfilter.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;fieldtype&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text_lr&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.TextField&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;positionIncrementGap&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;charFilter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceCharFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;^(.*)$&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AAAA $1 ZZZZ&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.ICUTokenizerFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.ICUFoldingFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.SynonymFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;synonyms&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;syn.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;ignoreCase&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;expand&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.CJKWidthFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.CJKBigramFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/fieldtype&amp;gt;&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that this charFilter actually adds two new tokens (‘AAAA’ and ‘ZZZZ’) to your token stream on both index and query. How does this help us?&lt;/p&gt;

&lt;p&gt;Let’s look at indexing &lt;code&gt;Mister Blue Sky&lt;/code&gt; in a normal text field. A normal solr phrase query &lt;code&gt;q=&quot;Blue Sky&quot;&lt;/code&gt; will match on that value, because the query phrase is fully contained in the indexed phrase.&lt;/p&gt;

&lt;p&gt;But what happens if we index into a &lt;code&gt;text_lr&lt;/code&gt; field?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Indexing &lt;code&gt;Mister Blue Sky&lt;/code&gt; becomes &lt;code&gt;aaaa mister blue sky zzzz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Search terms &lt;code&gt;blue sky&lt;/code&gt; becomes &lt;code&gt;aaaa blue sky zzzz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Phrase searching will then compare the two transformed values using normal Solr rules, &lt;em&gt;find the the latter is not fully contained in the former as a phrase&lt;/em&gt;, and give up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be careful, though. That ‘aaaa’ and ‘zzzz’ are there just as if you’d typed them in. Thus every indexed value has the tokens ‘aaaa’ and ‘zzzz’, and every query will, in effect, include a query for ‘aaaa’ or ‘zzzz’ (depending on your &lt;code&gt;mm&lt;/code&gt; settings).&lt;/p&gt;

&lt;p&gt;That means that &lt;strong&gt;any non-phrase query will match every field that uses this fieldtype&lt;/strong&gt;, and it will also mess with token counts with respect to your &lt;code&gt;mm&lt;/code&gt; parameter. For those reasons, &lt;em&gt;only ever use anchored fieldtypes for phrase queries when you want exactish matches&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By adding only one of ‘AAAA’ or ‘ZZZZ’, we can have left-anchored and right-anchored searches as well. See &lt;a href=&quot;https://github.com/billdueber/solr_stupid_tricks/blob/SST4/solr/conf/schema.xml&quot;&gt;the schema.xml&lt;/a&gt; for these definitions.&lt;/p&gt;

&lt;h3 id=&quot;try-it-out&quot;&gt;Try it out!&lt;/h3&gt;

&lt;p&gt;Let’s take a small set of new documents:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
[
  {
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;The Monkees: Pleasant Valley Never&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  {
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;The Monkees&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  {
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Meet the Monkees&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  {
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Corportate boy bands through the ages&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
]

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We have copyFields set up to copy the title field to both a fully-anchored field (&lt;code&gt;text_exact&lt;/code&gt;) and a left-anchored field (&lt;code&gt;text_l&lt;/code&gt;).&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title_exact&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;copyField&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;source&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;dest&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title_l&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you’re following at home, clear out your solr and index them:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
cd exampledocs
 ./reset_and_index_json.sh exactish.json

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We’ll now run three dismax queries, all of which use the search terms &lt;code&gt;the monkees&lt;/code&gt;. Watch what happens to the score as we change things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, &lt;code&gt;qf=title, pf=title^2&lt;/code&gt;. This will match the three Monkees documents, and then boost &lt;em&gt;all&lt;/em&gt; of them because they all contain the phrase “the monkees” in the title.&lt;/li&gt;
  &lt;li&gt;Second, &lt;code&gt;qf=title, pf=title_exact^10 title^2&lt;/code&gt;. These will match the Monkees documents, and then give a huge boost to the one with the exact match.&lt;/li&gt;
  &lt;li&gt;Finally, &lt;code&gt;qf=title, pf=title_exact^10 title_l^5 title^2&lt;/code&gt;. There you’ll see the score for the exact title match go way up (relatively speaking, of course), and document 1 go up quite a bit (because it begins with the phrase “The Monkees”).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run all three queries as:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
cd ruby
ruby browse.rb exactish_query.rb
# or ruby browse.rb exactish_query.rb json|xml|csv to get different output type

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;[BTW, &lt;code&gt;browse.rb&lt;/code&gt; will now take an array of queries to run in a single file.]&lt;/p&gt;

&lt;p&gt;Tah Dah! You’ve successfully boosted the exatish match, and the left-anchored exactish match. Your known-item-searchers will thank you.&lt;/p&gt;

&lt;p&gt;You may want to take a look at &lt;code&gt;exactish_query.rb&lt;/code&gt; to see what’s going on.&lt;/p&gt;

&lt;h3 id=&quot;to-sum-up&quot;&gt;To sum up&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Your &lt;code&gt;schema.xml&lt;/code&gt; now contains a decent text type and three variants for anchoring phrase searches left, right, and full (exactish)&lt;/li&gt;
  &lt;li&gt;The anchored text fields should NOT NOT NOT be searched against by anything other than a single phrase (which means they’re very useful in the &lt;code&gt;pf&lt;/code&gt; param of a dismax search). A non-phrase search will trivially match &lt;em&gt;every single document&lt;/em&gt;, so, you know, avoid that.&lt;/li&gt;
  &lt;li&gt;You now have a set of tools (field types, copyField directives, phrase search) that can be used to provide higher boosts to exactish matches and left-anchored exactish phrase matches.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 19 Mar 2012 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/03/boosting-on-exactish-anchored-phrase-matching-in-solr-sst-4/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/03/boosting-on-exactish-anchored-phrase-matching-in-solr-sst-4/</guid>
        
        <category>exact,</category>
        
        <category>fieldtype,</category>
        
        <category>solr,</category>
        
        <category>Stupid</category>
        
        <category>Solr</category>
        
        <category>Tricks</category>
        
        
      </item>
    
      <item>
        <title>Requiring/Preferring searches that don&#39;t span multiple values (SST #3)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Check out &lt;a href=&quot;http://robotlibrarian.billdueber.com/stupid-solr-tricks-introduction/&quot;&gt;introduction to the Stupid Solr Tricks series&lt;/a&gt; if you’re just joining us.]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;solr-and-multivalued-fields&quot;&gt;Solr and multiValued fields&lt;/h3&gt;

&lt;p&gt;Here’s another thing you need to understand about Solr: it doesn’t really have fields that can take multiple values.&lt;/p&gt;

&lt;p&gt;“But Bill,” you’re saying, “sure it does. I mean, hell, it even has a ‘multiValued’ parameter.”&lt;/p&gt;

&lt;p&gt;First off: watch your language.&lt;/p&gt;

&lt;p&gt;Second off: are you &lt;em&gt;sure&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Let’s do a quick test. Look at the following documents&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;exampledocs/names.json
[
  {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;The Monkees&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;name_text&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Peter Tork&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Mike Nesmith&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
                  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Micky Dolenz&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Davy Thomas Jones&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  },
  {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Heros of the Wild West&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;name_text&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Buck Jones&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Davy Crockett&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  }
]

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Question: what do you get when you run this query against those two documents?&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;ruby/names_query.rb
{
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;fl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;score, *&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;defType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dismax&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;wt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;csv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;qf&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;name_text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;davy jones&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;   &lt;span style=&quot;color:#777&quot;&gt;# Poor guy just died. So young. So short.&lt;/span&gt;
}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;See how I threw the &lt;em&gt;wt=csv&lt;/em&gt; in there? Check out &lt;a href=&quot;http://lucene.apache.org/solr/api/org/apache/solr/response/QueryResponseWriter.html&quot;&gt;all the query response formats&lt;/a&gt; if you’re interested, but really all you’ll use is &lt;code&gt;standard&lt;/code&gt; (XML), &lt;code&gt;json&lt;/code&gt;, or &lt;code&gt;csv&lt;/code&gt; unless you’re rolling your own in some way.&lt;/p&gt;

&lt;p&gt;I’ve updated &lt;code&gt;ruby/browse.rb&lt;/code&gt; to allow a second argument of the type of output you want. You can now do &lt;code&gt;ruby browse.rb jsonfile [json|csv|standard|xml]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;following-along-at-home&quot;&gt;Following along at home?&lt;/h3&gt;

&lt;p&gt;If so, let’s go ahead and index these document and run the query.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;Play along at home
cd solr_stupid_tricks
git pull origin master
git fetch --all
git checkout SST3 # I&#39;ve started tagging the repo for these posts
# ignore warning about &amp;quot;detached HEAD&amp;quot;
java -jar start.jar &amp;amp;
cd exampledocs
 ./reset_and_index_json.sh names.json
 cd ../ruby
 ruby browse.rb names_query.rb

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the scores that I get:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;Return from Solr
  id,title,name_text,score
  2,Heros of the Wild West,&amp;quot;Buck Jones,Davy Crockett&amp;quot;,0.42039964
  1,The Monkees,&amp;quot;Peter Tork,Mike Nesmith,Micky Dolenz,Davy Thomas Jones&amp;quot;,0.26274976

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Check out that last column. The query was &lt;em&gt;davy jones&lt;/em&gt;. Document #1 contains a name that has both those terms, but document #2 (which has both terms, but in different names) gets a higher score.&lt;/p&gt;

&lt;h3 id=&quot;the-relevance-ranking-seemswrong&quot;&gt;The relevance ranking seems…wrong&lt;/h3&gt;

&lt;p&gt;While it &lt;em&gt;looks&lt;/em&gt; like we added four separate names to the &lt;code&gt;name_text&lt;/code&gt; field in our first document, Solr doesn’t see it that way. Solr treats those four poor Monkees as if they had one long name.&lt;/p&gt;

&lt;p&gt;Then it finds all the documents that match the query (both of our documents match) and figures out which is a better match by assigning a score.&lt;/p&gt;

&lt;p&gt;In this case, while both document have both query terms, the field in the second document is &lt;em&gt;shorter&lt;/em&gt;. Which means that, essentially, a &lt;em&gt;higher percentage of the terms in the field value match the given  query terms&lt;/em&gt;. In Solr’s mind, that makes it a better match, and the shorter document shows up first.&lt;/p&gt;

&lt;p&gt;Solr doesn’t automatically give more weight to the recently-dead Monkee because internally it doesn’t care that you’re thinking of those values as four separate names. It just concatenates them together and indexes them.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt;, for most people, expected behavior.&lt;/p&gt;

&lt;h3 id=&quot;phrase-slop&quot;&gt;Phrase slop&lt;/h3&gt;

&lt;p&gt;Part of what’s going on here is that we haven’t told Solr that it should care how close together the terms are.&lt;/p&gt;

&lt;p&gt;One way to do that is to use a phrase query by throwing quotes around the terms&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Put&lt;/span&gt; double-quotes around it to make it a phrase query
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;quot;Davy Jones&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…but that won’t find anything, because &lt;em&gt;Davy&lt;/em&gt; and &lt;em&gt;Jones&lt;/em&gt; aren’t right next to each other in our document.&lt;/p&gt;

&lt;p&gt;Solr does allow a phrase query to be “sloppy”, though – basically saying that instead of being right next to each other, the terms need to be within a certain number of tokens of each other.&lt;/p&gt;

&lt;p&gt;For that, we’ll tell solr to search against certain fields (&lt;code&gt;pf&lt;/code&gt;) treating the query as a phrase, and allow a little slop (&lt;code&gt;ps&lt;/code&gt;) as well.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;ruby/names_sloppy_query.rb
  {
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;fl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;score, *&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;defType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dismax&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;wt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;csv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;davy jones&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;qf&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;name_text&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pf&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;name_text^10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#777&quot;&gt;# search this field as a phrase&lt;/span&gt;
    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ps&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;# allow &#39;phrase&#39; to mean &#39;within 4 tokens of each other&#39;&lt;/span&gt;
  }  

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That gets us something more expected.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  id,title,name_text,score
  1,The Monkees,&amp;quot;Peter Tork,Mike Nesmith,Micky Dolenz,Davy Thomas Jones&amp;quot;,0.2806283
  2,Heros of the Wild West,&amp;quot;Buck Jones,Davy Crockett&amp;quot;,0.029652705

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;enter-positionincrementgap&quot;&gt;Enter &lt;code&gt;positionIncrementGap&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;OK. Now that we have the concept of “slop”, one of those mystery &lt;code&gt;fieldtype&lt;/code&gt; parameters makes sense: &lt;code&gt;positionIncrementGap&lt;/code&gt;. Basically, a &lt;code&gt;positionIncrementGap&lt;/code&gt; of 1000 means &lt;em&gt;When computing slop, pretend there are 1000 tokens between the entries in a multValued field&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A sloppy phrase search, then, will only find (and thus boost) the phrase if (a) the tokens are in the same entry for a multiValued field, and (b) your slop value is less than your &lt;code&gt;positionIncrementGap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All you have to do is use the &lt;code&gt;pf&lt;/code&gt; and &lt;code&gt;ps&lt;/code&gt; parameters and you’re set.&lt;/p&gt;

&lt;p&gt;Note that this should be telling you two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Always use the same positionIncrementGap for your multiValued fields&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make it a number much larger than the maximum number of tokens you expect to ever have in a field.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that a large &lt;code&gt;positionIncrementGap&lt;/code&gt; doesn’t &lt;em&gt;actually&lt;/em&gt; put 1000 tokens in there – a large value doesn’t affect processing time or your index size or anything.&lt;/p&gt;

&lt;h3 id=&quot;but-im-already-using-the-pf-parameter&quot;&gt;But I’m already using the &lt;code&gt;pf&lt;/code&gt; parameter!&lt;/h3&gt;

&lt;p&gt;Slop is great when you want it. But I don’t always want to use slop. Slop of 4 makes the phrase “&lt;em&gt;Sex in the City&lt;/em&gt;” be treated exactly the same as “&lt;em&gt;In the Sex City&lt;/em&gt;”. If someone puts in an exact title, I want to reward them for that query by floating the exact match to the top, and slop prevents me from doing so.&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;Forshadowing&lt;/em&gt;: We’ll talk about exact-ish matches in a few days.]&lt;/p&gt;

&lt;p&gt;OK, so we can’t just appropriate the &lt;code&gt;pf&lt;/code&gt;/&lt;code&gt;ps&lt;/code&gt; parameters and and push the slop value up all the time – that cripples our ability to create the query boost structure we want.&lt;/p&gt;

&lt;h3 id=&quot;query-slop&quot;&gt;Query slop&lt;/h3&gt;

&lt;p&gt;So, dismax (and its cousin edismax) have an analogous parameter that affects only &lt;em&gt;phrases within&lt;/em&gt; the normal query: &lt;code&gt;qs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;qs&lt;/code&gt; is a dismax param that affects &lt;em&gt;query slop&lt;/em&gt; – how much slop to allow in phrases within the query, much like the &lt;code&gt;ps&lt;/code&gt; param.&lt;/p&gt;

&lt;p&gt;The query&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;A&lt;/span&gt; three-token query
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Bill &amp;quot;The Weasel&amp;quot; Dueber&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…has three tokens, the second of which (&lt;em&gt;“The Weasel”&lt;/em&gt;) is a phrase. It’s that phrase token that is affected by query slop.&lt;/p&gt;

&lt;p&gt;OK. So it affects only the phrases in the normal query. But…suppose we just force the &lt;em&gt;entire&lt;/em&gt; query to be one big phrase? That’ll get us somewhere!&lt;/p&gt;

&lt;p&gt;We just need to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a boost query that uses the same fields as the regular query&lt;/li&gt;
  &lt;li&gt;…but treats all the query terms as one big phrase&lt;/li&gt;
  &lt;li&gt;…and give it a query slop of one less that the &lt;code&gt;positionIncrementGap&lt;/code&gt; in our field type definition (in my case, 999)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;package-it-up&quot;&gt;Package it up&lt;/h3&gt;

&lt;p&gt;OK, so here’s what we’re going to do. You can just take this basic idea and build it into your own queries in your application code. Try it. You might like it. Play around with what fields are affected, how much weight to give it, etc.&lt;/p&gt;

&lt;p&gt;But heck, we’ve gone this far. Let’s encode it into the Solr configuration file &lt;code&gt;solrconfig.xml&lt;/code&gt; itself as a custom request handler.&lt;/p&gt;

&lt;p&gt;We’re going to extend our &lt;code&gt;edismaxplus&lt;/code&gt; requestHandler from &lt;a href=&quot;http://robotlibrarian.billdueber.com/using-localparams-in-solr-sst-2/&quot;&gt;last time&lt;/a&gt;, but we’ll add an extra boost query that reflects this new “prefer documents where all the tokens appear in the same ‘line’ of a multiValued query” attitude.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;solr/conf/solrconfig.xml&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;requestHandler&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/edismaxplus&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.SearchHandler&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;lst&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;defaults&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;10&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;fl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;*,score&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echoParams&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;explicit&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
      _query_:&amp;quot;{!edismax qf=$fields mm=$mymm
                          v=$qwords bq=$boostForAll}&amp;quot;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mymm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;0%&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;qwordsphrase&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;&amp;quot;JunkThatWillNEverShowUpInAMillionFreakinYears&amp;quot;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;str&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;boostForAll&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
      _query_:&amp;quot;{!edismax qf=$fields
                         mm=&#39;100%&#39;
                         v=$qwords }&amp;quot;^5 OR
      _query_:&amp;quot;{!dismax  qf=$fields
                         mm=&#39;100%&#39;
                         v=$qwordsphrase
                         qs=&#39;999&#39;}&amp;quot;^5
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/requestHandler&amp;gt;&lt;/span&gt;  

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We now do a few new things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(&lt;em&gt;Line 15&lt;/em&gt;) Add a second clause to the boost query that use the same fields provided for the regular query (note the boolean OR between the two localparams queries that comprise this boost query)&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Line 17&lt;/em&gt;) Ask for another user-provided value: &lt;code&gt;qwordsphrase&lt;/code&gt; which your application-level stuff should set to the set of all the regular query ters, but as a single phrase. Basically, strip out all the double-quotes, then put the whole thing in double quotes. In ruby: &lt;code&gt;qwordsphrase = &#39;&quot;&#39; + qwords.gsub(/&quot;/, &#39;&quot;&#39;) + &#39;&quot;&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Line 10&lt;/em&gt;) Provide a default value for the new &lt;code&gt;qwordsphrase&lt;/code&gt; that won’t ever show up in a real query (empty string won’t work; I tried it and it throws an error). So, if the application doesn’t provide &lt;code&gt;qwordsphrase&lt;/code&gt;, no harm is done – the search regresses to what we had last time.&lt;/li&gt;
  &lt;li&gt;(&lt;em&gt;Line 18&lt;/em&gt;) Use a &lt;code&gt;qs&lt;/code&gt; (query slop) of 999 in the new boost clause acting against &lt;code&gt;qwordsphrase&lt;/code&gt;. That value is one less than the &lt;code&gt;positionIncrementGap&lt;/code&gt; of 1000, making sure that we don’t cross multiValue boundaries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you wanted to, you could make this a filter query (&lt;code&gt;fq&lt;/code&gt;) instead of a boost query to &lt;em&gt;only&lt;/em&gt; allow documents that meet this criterion.&lt;/p&gt;

&lt;h3 id=&quot;lets-try-it-out&quot;&gt;Let’s try it out!&lt;/h3&gt;

&lt;p&gt;Once again, if you did a &lt;code&gt;git pull origin master&lt;/code&gt; you’ve got this up and running already – the updated requestHandler source is already in &lt;code&gt;solr/conf/solrconfig.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We first construct the query just like we did last week, without the &lt;code&gt;qwordsphrase&lt;/code&gt; argument:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/edismaxplus/?qwords=davy%20jones&amp;amp;fields=name_text&quot;&gt;http://localhost:8983/solr/edismaxplus/?qwords=davy jones&amp;amp;fields=name_text&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll see Davy Crockett and friend appear as the first item.&lt;/p&gt;

&lt;p&gt;But when you add the phraseified query, you’ll see the boost we’ve been talking about this whole post and get something more expected.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/edismaxplus/?qwords=davy%20jones&amp;amp;fields=name_text&amp;amp;qwordsphrase=%22Davy%20Jones%22&quot;&gt;http://localhost:8983/solr/edismaxplus/?qwords=davy jones&amp;amp;fields=name_text&amp;amp;qwordsphrase=”Davy Jones”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Monkees are again on top! Party like it’s 1967!&lt;/p&gt;

&lt;h3 id=&quot;where-it-breaks-down&quot;&gt;Where it breaks down&lt;/h3&gt;

&lt;p&gt;If you actually have a phrase as one of your query terms, it will no longer be treated as a phrase during the boost because we’re getting rid of all the double-quotes.&lt;/p&gt;

&lt;p&gt;And, of course, if you’ve got gobs of full-text and include your fulltext field, setting  query slop to 999 isn’t just a cute trick, it’s a cute trick that will melt your servers to slag and still not do what you want it to do.&lt;/p&gt;

&lt;h3 id=&quot;what-have-we-learned&quot;&gt;What have we learned?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Solr doesn’t really separate multiple values from each other in a &lt;code&gt;multiValued&lt;/code&gt; field&lt;/li&gt;
  &lt;li&gt;Phrase slop (&lt;code&gt;ps&lt;/code&gt;) and query slop (&lt;code&gt;qs&lt;/code&gt;) can be used to allow “phrase” to mean “a bunch of tokens within X spots of each other”&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;I’m A Believer&lt;/em&gt; is the best song Neil Diamond ever wrote.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Mar 2012 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/03/requiringpreferring-searches-that-dont-span-multiple-values-sst-3/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/03/requiringpreferring-searches-that-dont-span-multiple-values-sst-3/</guid>
        
        <category>phrase</category>
        
        <category>slop,</category>
        
        <category>solr,</category>
        
        <category>Stupid</category>
        
        <category>Solr</category>
        
        <category>Tricks</category>
        
        
      </item>
    
      <item>
        <title>Using localparams in Solr (or, how to boost records that contain all terms) (SST #2)</title>
        <description>&lt;p&gt;[Note: this isn’t so much a &lt;em&gt;Stupid Solr Trick&lt;/em&gt; as a &lt;em&gt;Thing You Should Probably Know&lt;/em&gt;; consider it required reading for the next SST. If you’re just joining us, check out the &lt;a href=&quot;http://robotlibrarian.billdueber.com/stupid-solr-tricks-introduction/&quot;&gt;introduction to the Stupid Solr Tricks series&lt;/a&gt;]&lt;/p&gt;

&lt;h3 id=&quot;what-the-heck-is-a-localparams-query&quot;&gt;What the heck is a localparams query?&lt;/h3&gt;

&lt;p&gt;A garden-variety Solr query URL looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  http://localhost:8983/solr/select?
    defType=dismax
    &amp;amp;amp;qf=name^2 place^1
    &amp;amp;amp;q=Dueber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is fine, as far as it goes. But it’s easy to run into the limits of the standard query plugins (e.g., Dismax).&lt;/p&gt;

&lt;p&gt;Say, for example, you want something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  title:Constructivism AND author:Dueber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And furthermore, you have multiple underlying fields (title1, title2, title3, author1, author2).&lt;/p&gt;

&lt;p&gt;The naïve approach would be to just do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  defType=dismax
  &amp;amp;amp;qf=title1 title2 title3 author1 author2
  &amp;amp;amp;q=Constructivism Dueber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can’t construct a dismax query with the boolean AND. You can with edismax, but even then you’ve got no way of telling (e)dismax that &lt;em&gt;Constructivism&lt;/em&gt; must be found in the title fields, and &lt;em&gt;Dueber&lt;/em&gt; must be found in the author fields. Dismax doesn’t do that.&lt;/p&gt;

&lt;h3 id=&quot;solution-build-a-query-of-queries&quot;&gt;Solution: Build a query of queries&lt;/h3&gt;

&lt;p&gt;The solution is to build a query made up of fully-encapsulated sub-queries. A localparams query has two forms (note that, of course, you’d need to URL-Escape the values):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  _query_:&quot;{!dismax qf=&#39;field^2 otherfield^4&#39;}my search terms&quot;
or
  _query_:&quot;{!dismax qf=&#39;field^2 otherfield^4&#39; v=$q1}&quot; &amp;amp; q1=my search terms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I far prefer the second form (which uses a second URL parameter &lt;code&gt;q1&lt;/code&gt; instead of sticking the search right in there), because I don’t have to worry about escaping double-quotes in the query terms (as you would if there’s a phrase as part of the query).&lt;/p&gt;

&lt;p&gt;Once you’ve got these things, you can combine them with booleans.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    q=_query_:&quot;{!dismax qf=&#39;title1 title2 title3&#39; v=$q1}&quot; AND
      _query_:&quot;{!dismax qf=&#39;author1 author2&#39; v=$q2}&quot;
  &amp;amp;q1=Constructivism
  &amp;amp;q2=Dueber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[Note: &lt;strong&gt;&lt;a href=&quot;http://robotlibrarian.billdueber.com/solr-and-boolean-operators/&quot;&gt;be careful with solr booleans!!!&lt;/a&gt;&lt;/strong&gt;]&lt;/p&gt;

&lt;p&gt;You can add any &lt;em&gt;local parameters&lt;/em&gt; you need (for dismax, stuff like mm, qs, pf, and ps) and you can use any query parser you want by changing what comes after the bang (e.g., &lt;code&gt;{!lucene ...}&lt;/code&gt; or &lt;code&gt;{!edismax...}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In this way, you can build up arbitrarily complex queries using any available query parsers in combination with each other. Very powerful.&lt;/p&gt;

&lt;h3 id=&quot;an-example-boost-records-that-contain-all-terms&quot;&gt;An example: boost records that contain all terms&lt;/h3&gt;

&lt;p&gt;Just about everything in a localparams query can be pulled out in the way I pulled out the search terms above. Here’s a fairly-complex example (which, let’s be honest, would be a lot more complex if you were trying to inline and escape everything).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: We want to do a logical-OR search (mm=0%), but want to make sure we boost documents that contain all the search terms. This is necessary because sometimes a very long document with all the terms will have a lower score than a very short document with most of the terms.&lt;/p&gt;

&lt;p&gt;Having short document with a few keywords show up before long documents with all the keywords will drive your librarians &lt;em&gt;CraZy&lt;/em&gt;!!! So it’s tempting to just leave it alone. But let’s fix it anyway.&lt;/p&gt;

&lt;p&gt;The gist of it is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Query against title and author&lt;/li&gt;
  &lt;li&gt;Use an mm of 0% (logical OR) for the main query&lt;/li&gt;
  &lt;li&gt;Use a pf to boost on a phrase in those same two fields (just common sense)&lt;/li&gt;
  &lt;li&gt;Set up a boost query (bq) to boost the score if &lt;em&gt;all&lt;/em&gt; the search terms are present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To accomplish this, we’re going to have two localparams queries: one to be the main query, and another that we’re going to use as the boost query. This works in much the same way as our previous “AND-together two localparams queries” did.&lt;/p&gt;

&lt;p&gt;[Presenting the URL parameters as a ruby hash to make it easier to read]&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  {
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;=&amp;gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;_query_:&amp;quot;{!dismax qf=$f1 mm=$mm1 pf=$f1 bq=$bq1 v=$q1}&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mm1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;=&amp;gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0%&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;=&amp;gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;author^3 title^1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;q1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;=&amp;gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Dueber Constructivism&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bq1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;=&amp;gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;_query_:&amp;quot;{!dismax qf=$f1 mm=&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;100%&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; v=$q1 }&amp;quot;^5&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;fl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt;; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;score,*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
  }


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What’s nice about this is that I’m reusing the search terms (for the main query and the boost query) and field list (for the query field and the phrase fields) so I don’t have to repeat them.&lt;/p&gt;

&lt;h3 id=&quot;try-along-at-home&quot;&gt;Try along at home&lt;/h3&gt;

&lt;p&gt;First off, if you don’t have a browser that does nice XML and JSON formatting, well, get one. I use Chrome with &lt;a href=&quot;https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc&quot;&gt;JSONView&lt;/a&gt; and &lt;a href=&quot;https://chrome.google.com/webstore/detail/gbammbheopgpmaagmckhpjbfgdfkpadb&quot;&gt;XMLTree&lt;/a&gt;, but I’m sure there are equivalents for Firefox. They’ll make your life easier.&lt;/p&gt;

&lt;p&gt;By now you know the drill:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd solr_stupid_tricks
  git pull origin master
  git fetch origin master
  git checkout SST2 # I&#39;ve started tagging the repo for these posts
  # ignore warning about &amp;quot;detached HEAD&amp;quot;
  java -jar start.jar &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We’ll want to empty out the index and put in some documents to work with. I’m presuming you have &lt;code&gt;curl&lt;/code&gt; installed. If not…well, you’re on your own.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd exampledocs
  ./reset_and_index_json localparams.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You might want to take a look at the &lt;code&gt;localparams.json&lt;/code&gt; file, which contains a set of documents in the new JSON update structure. The &lt;a href=&quot;http://wiki.apache.org/solr/UpdateJSON&quot;&gt;full Solr JSON Update structure&lt;/a&gt; allows repeated keys. Apparently, so does the &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627&quot;&gt;JSON RFC&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.2. Objects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members). A name is a string. A single colon comes after each name, separating the name from the value. A single comma separates a value from a following name. &lt;strong&gt;The names within an object SHOULD be unique.&lt;/strong&gt; &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“SHOULD”. Not “MUST”. I don’t care if it’s legal. It still weirds me out.&lt;/p&gt;

&lt;p&gt;Once you’ve got solr running in the background, you can go ahead and try our query!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re really lazy, just &lt;a href=&quot;http://localhost:8983/solr/select/?q=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%24mm1+pf%3D%24f1+bq%3D%24bq1+v%3D%24q1%7D%22&amp;amp;mm1=0%25&amp;amp;f1=author%5E3+title%5E1&amp;amp;q1=Dueber+Constructivism&amp;amp;bq1=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%27100%25%27+v%3D%24q1+%7D%22%5E5&amp;amp;fl=score%2C%2A&quot;&gt;click the link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you’re slightly less lazy, and you’ve got ruby installed, take a look in the new ruby directory. You can run &lt;code&gt;ruby browse.rb localparams_query.rb&lt;/code&gt; to run the query and have it automatically open up in your browser.&lt;/li&gt;
  &lt;li&gt;If you’re ambitious, you might want to actually mess with the &lt;code&gt;localparams_query.rb&lt;/code&gt; file so you can try things out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a longish side note, we’ll probably use &lt;code&gt;browse.rb&lt;/code&gt; in the future of this series as well, so you might want to go ahead and get ruby installed if you don’t already. &lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; is the easiest route if you’re on linux/OSX. You can also just install &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt;, seeing as how you’re running java anway (just make sure to use 1.9 mode by calling stuff as &lt;code&gt;jruby --1.9 myscript.rb&lt;/code&gt; or setting the environment variable &lt;code&gt;export JRUBY_OPTS=--1.9&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;special-stupid-solr-trick-make-a-special-query-handler-for-a-complex-query&quot;&gt;Special Stupid Solr Trick: Make a special query handler for a complex query&lt;/h3&gt;

&lt;p&gt;OK, so I said I wouldn’t have a real SST in this episode, but it’s so damn long at this point I figure I’ve lost everyone except Rochkind (Hey, Jonathan!), so let’s throw one in.&lt;/p&gt;

&lt;p&gt;The Solr configuration file &lt;code&gt;solrconfig.xml&lt;/code&gt; is where you can configure custom search handlers. In such a custom handler, you can specify defaults (which, by default, can be overridden by passed-in parameters, although you can control that, too) – this is commonly used to, say, put in a &lt;code&gt;q.alt&lt;/code&gt; or a filter query that will always be applied.&lt;/p&gt;

&lt;p&gt;But we can use it to put in our special query defaults that boosts when a document contains all the terms:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;

      10
      *,score
      explicit

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=$mymm
                           v=$qwords
                           bq=$boostForAll}&amp;quot;

      0%

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=&#39;100%&#39;
                           v=$qwords }&amp;quot;^5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you look closely, you’ll see that everything you need is defined in this requestHandler in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file, except for &lt;code&gt;$fields&lt;/code&gt; and &lt;code&gt;$qwords&lt;/code&gt;. You could also override &lt;code&gt;mymm&lt;/code&gt; by passing in an argument with that name, if the default ‘0%’ isn’t to your liking.&lt;/p&gt;

&lt;p&gt;If you’ve been following along at home, this requestHandler is already in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file that you’re running right now. Go ahead and try it! Let’s search for the terms ‘dueberb’ and ‘penn’ and see if the correct record floats to the top.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/edismaxplus/?qwords=dueber%20penn&amp;amp;fields=author%20title&quot;&gt;http://localhost:8983/solr/edismaxplus/?qwords=dueber penn&amp;amp;fields=author title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nifty, huh?&lt;/p&gt;

&lt;p&gt;Next time we’ll use a local params query to get around something about dismax that drives me crazy: preventing (or penalizing) matches that go across a field’s multiple values.100%&lt;br /&gt;
What’s nice about this is that I’m reusing the search terms (for the main query and the boost query) and field list (for the query field and the phrase fields) so I don’t have to repeat them.&lt;/p&gt;

&lt;h3 id=&quot;try-along-at-home-1&quot;&gt;Try along at home&lt;/h3&gt;

&lt;p&gt;First off, if you don’t have a browser that does nice XML and JSON formatting, well, get one. I use Chrome with &lt;a href=&quot;https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc&quot;&gt;JSONView&lt;/a&gt; and &lt;a href=&quot;https://chrome.google.com/webstore/detail/gbammbheopgpmaagmckhpjbfgdfkpadb&quot;&gt;XMLTree&lt;/a&gt;, but I’m sure there are equivalents for Firefox. They’ll make your life easier.&lt;/p&gt;

&lt;p&gt;By now you know the drill:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd solr_stupid_tricks
  git pull origin master
  git fetch origin master
  git checkout SST2 # I&#39;ve started tagging the repo for these posts
  # ignore warning about &amp;quot;detached HEAD&amp;quot;
  java -jar start.jar &amp;amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll want to empty out the index and put in some documents to work with. I’m presuming you have &lt;code&gt;curl&lt;/code&gt; installed. If not…well, you’re on your own.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd exampledocs
  ./reset_and_index_json localparams.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You might want to take a look at the &lt;code&gt;localparams.json&lt;/code&gt; file, which contains a set of documents in the new JSON update structure. The &lt;a href=&quot;http://wiki.apache.org/solr/UpdateJSON&quot;&gt;full Solr JSON Update structure&lt;/a&gt; allows repeated keys. Apparently, so does the &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627&quot;&gt;JSON RFC&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;gt; 2.2. Objects
&amp;gt; An object structure is represented as a pair of curly brackets
&amp;gt; surrounding zero or more name/value pairs (or members). A name is a
&amp;gt; string. A single colon comes after each name, separating the name
&amp;gt; from the value. A single comma separates a value from a following
&amp;gt; name. &lt;strong&gt;The names within an object SHOULD be unique.&lt;/strong&gt; &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“SHOULD”. Not “MUST”. I don’t care if it’s legal. It still weirds me out.&lt;/p&gt;

&lt;p&gt;Once you’ve got solr running in the background, you can go ahead and try our query!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re really lazy, just &lt;a href=&quot;http://localhost:8983/solr/select/?q=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%24mm1+pf%3D%24f1+bq%3D%24bq1+v%3D%24q1%7D%22&amp;amp;mm1=0%25&amp;amp;f1=author%5E3+title%5E1&amp;amp;q1=Dueber+Constructivism&amp;amp;bq1=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%27100%25%27+v%3D%24q1+%7D%22%5E5&amp;amp;fl=score%2C%2A&quot;&gt;click the link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you’re slightly less lazy, and you’ve got ruby installed, take a look in the new ruby directory. You can run &lt;code&gt;ruby browse.rb localparams_query.rb&lt;/code&gt; to run the query and have it automatically open up in your browser.&lt;/li&gt;
  &lt;li&gt;If you’re ambitious, you might want to actually mess with the &lt;code&gt;localparams_query.rb&lt;/code&gt; file so you can try things out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a longish side note, we’ll probably use &lt;code&gt;browse.rb&lt;/code&gt; in the future of this series as well, so you might want to go ahead and get ruby installed if you don’t already. &lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; is the easiest route if you’re on linux/OSX. You can also just install &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt;, seeing as how you’re running java anway (just make sure to use 1.9 mode by calling stuff as &lt;code&gt;jruby --1.9 myscript.rb&lt;/code&gt; or setting the environment variable &lt;code&gt;export JRUBY_OPTS=--1.9&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;special-stupid-solr-trick-make-a-special-query-handler-for-a-complex-query-1&quot;&gt;Special Stupid Solr Trick: Make a special query handler for a complex query&lt;/h3&gt;

&lt;p&gt;OK, so I said I wouldn’t have a real SST in this episode, but it’s so damn long at this point I figure I’ve lost everyone except Rochkind (Hey, Jonathan!), so let’s throw one in.&lt;/p&gt;

&lt;p&gt;The Solr configuration file &lt;code&gt;solrconfig.xml&lt;/code&gt; is where you can configure custom search handlers. In such a custom handler, you can specify defaults (which, by default, can be overridden by passed-in parameters, although you can control that, too) – this is commonly used to, say, put in a &lt;code&gt;q.alt&lt;/code&gt; or a filter query that will always be applied.&lt;/p&gt;

&lt;p&gt;But we can use it to put in our special query defaults that boosts when a document contains all the terms:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;

      10
      *,score
      explicit

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=$mymm
                           v=$qwords
                           bq=$boostForAll}&amp;quot;

      0%

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=&#39;100%&#39;
                           v=$qwords }&amp;quot;^5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you look closely, you’ll see that everything you need is defined in this requestHandler in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file, except for &lt;code&gt;$fields&lt;/code&gt; and &lt;code&gt;$qwords&lt;/code&gt;. You could also override &lt;code&gt;mymm&lt;/code&gt; by passing in an argument with that name, if the default ‘0%’ isn’t to your liking.&lt;/p&gt;

&lt;p&gt;If you’ve been following along at home, this requestHandler is already in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file that you’re running right now. Go ahead and try it! Let’s search for the terms ‘dueberb’ and ‘penn’ and see if the correct record floats to the top.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/edismaxplus/?qwords=dueber%20penn&amp;amp;fields=author%20title&quot;&gt;http://localhost:8983/solr/edismaxplus/?qwords=dueber penn&amp;amp;fields=author title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nifty, huh?&lt;/p&gt;

&lt;p&gt;Next time we’ll use a local params query to get around something about dismax that drives me crazy: preventing (or penalizing) matches that go across a field’s multiple values. v=$q1 }”^5’,&lt;br /&gt;
  ‘fl’ =&amp;gt; ‘score,*’&lt;br /&gt;
  }&lt;br /&gt;
~~~&lt;br /&gt;
What’s nice about this is that I’m reusing the search terms (for the main query and the boost query) and field list (for the query field and the phrase fields) so I don’t have to repeat them.&lt;/p&gt;

&lt;h3 id=&quot;try-along-at-home-2&quot;&gt;Try along at home&lt;/h3&gt;

&lt;p&gt;First off, if you don’t have a browser that does nice XML and JSON formatting, well, get one. I use Chrome with &lt;a href=&quot;https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc&quot;&gt;JSONView&lt;/a&gt; and &lt;a href=&quot;https://chrome.google.com/webstore/detail/gbammbheopgpmaagmckhpjbfgdfkpadb&quot;&gt;XMLTree&lt;/a&gt;, but I’m sure there are equivalents for Firefox. They’ll make your life easier.&lt;/p&gt;

&lt;p&gt;By now you know the drill:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd solr_stupid_tricks
  git pull origin master
  git fetch origin master
  git checkout SST2 # I&#39;ve started tagging the repo for these posts
  # ignore warning about &amp;quot;detached HEAD&amp;quot;
  java -jar start.jar &amp;amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll want to empty out the index and put in some documents to work with. I’m presuming you have &lt;code&gt;curl&lt;/code&gt; installed. If not…well, you’re on your own.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  cd exampledocs
  ./reset_and_index_json localparams.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You might want to take a look at the &lt;code&gt;localparams.json&lt;/code&gt; file, which contains a set of documents in the new JSON update structure. The &lt;a href=&quot;http://wiki.apache.org/solr/UpdateJSON&quot;&gt;full Solr JSON Update structure&lt;/a&gt; allows repeated keys. Apparently, so does the &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627&quot;&gt;JSON RFC&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;gt; 2.2. Objects
&amp;gt; An object structure is represented as a pair of curly brackets
&amp;gt; surrounding zero or more name/value pairs (or members). A name is a
&amp;gt; string. A single colon comes after each name, separating the name
&amp;gt; from the value. A single comma separates a value from a following
&amp;gt; name. &lt;strong&gt;The names within an object SHOULD be unique.&lt;/strong&gt; &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“SHOULD”. Not “MUST”. I don’t care if it’s legal. It still weirds me out.&lt;/p&gt;

&lt;p&gt;Once you’ve got solr running in the background, you can go ahead and try our query!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re really lazy, just &lt;a href=&quot;http://localhost:8983/solr/select/?q=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%24mm1+pf%3D%24f1+bq%3D%24bq1+v%3D%24q1%7D%22&amp;amp;mm1=0%25&amp;amp;f1=author%5E3+title%5E1&amp;amp;q1=Dueber+Constructivism&amp;amp;bq1=\_query\_%3A%22%7B%21dismax+qf%3D%24f1+mm%3D%27100%25%27+v%3D%24q1+%7D%22%5E5&amp;amp;fl=score%2C%2A&quot;&gt;click the link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If you’re slightly less lazy, and you’ve got ruby installed, take a look in the new ruby directory. You can run &lt;code&gt;ruby browse.rb localparams_query.rb&lt;/code&gt; to run the query and have it automatically open up in your browser.&lt;/li&gt;
  &lt;li&gt;If you’re ambitious, you might want to actually mess with the &lt;code&gt;localparams_query.rb&lt;/code&gt; file so you can try things out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a longish side note, we’ll probably use &lt;code&gt;browse.rb&lt;/code&gt; in the future of this series as well, so you might want to go ahead and get ruby installed if you don’t already. &lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; is the easiest route if you’re on linux/OSX. You can also just install &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt;, seeing as how you’re running java anway (just make sure to use 1.9 mode by calling stuff as &lt;code&gt;jruby --1.9 myscript.rb&lt;/code&gt; or setting the environment variable &lt;code&gt;export JRUBY_OPTS=--1.9&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;special-stupid-solr-trick-make-a-special-query-handler-for-a-complex-query-2&quot;&gt;Special Stupid Solr Trick: Make a special query handler for a complex query&lt;/h3&gt;

&lt;p&gt;OK, so I said I wouldn’t have a real SST in this episode, but it’s so damn long at this point I figure I’ve lost everyone except Rochkind (Hey, Jonathan!), so let’s throw one in.&lt;/p&gt;

&lt;p&gt;The Solr configuration file &lt;code&gt;solrconfig.xml&lt;/code&gt; is where you can configure custom search handlers. In such a custom handler, you can specify defaults (which, by default, can be overridden by passed-in parameters, although you can control that, too) – this is commonly used to, say, put in a &lt;code&gt;q.alt&lt;/code&gt; or a filter query that will always be applied.&lt;/p&gt;

&lt;p&gt;But we can use it to put in our special query defaults that boosts when a document contains all the terms:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;

      10
      *,score
      explicit

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=$mymm
                           v=$qwords
                           bq=$boostForAll}&amp;quot;

      0%

        _query_:&amp;quot;{!edismax qf=$fields
                           mm=&#39;100%&#39;
                           v=$qwords }&amp;quot;^5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you look closely, you’ll see that everything you need is defined in this requestHandler in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file, except for &lt;code&gt;$fields&lt;/code&gt; and &lt;code&gt;$qwords&lt;/code&gt;. You could also override &lt;code&gt;mymm&lt;/code&gt; by passing in an argument with that name, if the default ‘0%’ isn’t to your liking.&lt;/p&gt;

&lt;p&gt;If you’ve been following along at home, this requestHandler is already in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file that you’re running right now. Go ahead and try it! Let’s search for the terms ‘dueberb’ and ‘penn’ and see if the correct record floats to the top.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8983/solr/edismaxplus/?qwords=dueber%20penn&amp;amp;fields=author%20title&quot;&gt;http://localhost:8983/solr/edismaxplus/?qwords=dueber penn&amp;amp;fields=author title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nifty, huh?&lt;/p&gt;

&lt;p&gt;Next time we’ll use a local params query to get around something about dismax that drives me crazy: preventing (or penalizing) matches that go across a field’s multiple values.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Mar 2012 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/03/using-localparams-in-solr-sst-2/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/03/using-localparams-in-solr-sst-2/</guid>
        
        <category>solr,</category>
        
        <category>Stupid</category>
        
        <category>Solr</category>
        
        <category>Tricks</category>
        
        
      </item>
    
      <item>
        <title>Solr Field Type for numeric(ish) IDs (SST #1)</title>
        <description>&lt;p&gt;[For the introduction to this series, take a quick gander at &lt;a href=&quot;http://robotlibrarian.billdueber.com/stupid-solr-tricks-introduction/&quot;&gt;the introduction&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Like everyone else in the library world, I’ve got a bunch of well-defined, well-controlled standard identifiers I need to keep track of and allow searching on.&lt;/p&gt;

&lt;p&gt;You know, well-vetted stuff like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1234-5678&lt;/li&gt;
  &lt;li&gt;123-4567-890&lt;/li&gt;
  &lt;li&gt;12-34-567-X&lt;/li&gt;
  &lt;li&gt;0012-0045&lt;/li&gt;
  &lt;li&gt;ISBN13: 1234567890123&lt;/li&gt;
  &lt;li&gt;ISSN: 1234567X (1998-99)&lt;/li&gt;
  &lt;li&gt;ISSN (1998-99): 1234567X&lt;/li&gt;
  &lt;li&gt;1234567890 (hdk. 22 pgs)&lt;/li&gt;
  &lt;li&gt;9&lt;/li&gt;
  &lt;li&gt;Behind the 3rd floor desk&lt;/li&gt;
  &lt;li&gt;Henry VIII&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[Note: some of these may be a titch exaggerated]&lt;/p&gt;

&lt;p&gt;How does your system deal with these on index? How about on query?&lt;/p&gt;

&lt;p&gt;Here’s an idea of how to use a custom solr fieldtype to do the heavy lifting.&lt;/p&gt;

&lt;h3 id=&quot;what-were-shooting-for&quot;&gt;What we’re shooting for&lt;/h3&gt;

&lt;p&gt;I’d like to be able to send in a text string as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The input can contain other text besides the id&lt;/li&gt;
  &lt;li&gt;The ID starts with a digit and consists solely of digits and (optional) dashes, then ends with a digits and possibly a trailing ‘X’ or ‘x’ so we can deal with ISBN/ISSN&lt;/li&gt;
  &lt;li&gt;The ID has to be at least N characters long (for this example, I’m using N=8); this helps us avoid other text that might trivially look like an ID but isn’t.&lt;/li&gt;
  &lt;li&gt;Only the ID itself is indexed&lt;/li&gt;
  &lt;li&gt;If no valid ID is identified, nothing is indexed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-numericid-field-suitable-for-isbnissnoclcetc&quot;&gt;The numericID field, suitable for ISBN/ISSN/OCLC/etc.&lt;/h3&gt;

&lt;p&gt;Let’s take a look at the end product and then walk through it.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;fieldtype&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;numericID&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.TextField&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
           &lt;span style=&quot;color:#b48&quot;&gt;positionIncrementGap&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;omitNorms&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.KeywordTokenizerFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;^.*?(\p{N}[\p{N}\-\.]{6,}[xX]?).*$&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;***$1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;^[^\*].*$&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;^\*\*\*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.LowerCaseFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;[^\p{N}x]&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;replace&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;all&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.LengthFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;min&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;max&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;14&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;class&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;solr.PatternReplaceFilterFactory&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span style=&quot;color:#b48&quot;&gt;pattern&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;^0*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;replacement&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/fieldtype&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;things-well-be-learning-about-today&quot;&gt;Things we’ll be learning about today&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE: I really, really recommend taking a look at &lt;a href=&quot;http://www.lucidimagination.com/content/scaling-lucene-and-solr&quot;&gt;Scaling Lucene and Solr&lt;/a&gt; by the good folks over at &lt;a href=&quot;http://www.lucidimagination.com/&quot;&gt;Lucid Imagination&lt;/a&gt; for great, short explanations of &lt;em&gt;omitNorms&lt;/em&gt;, term frequencies, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since this is the first post, I’ll go over some stuff that’s probably a little&lt;br /&gt;
too basic for any audience that’s likely to show up here, but what the heck.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KeywordTokenizer&lt;/li&gt;
  &lt;li&gt;PatternReplaceFilterFactory&lt;/li&gt;
  &lt;li&gt;LowerCaseFilterFactory&lt;/li&gt;
  &lt;li&gt;LengthFilterFactory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-1-tokenize-to-a-single-token&quot;&gt;Step 1: “Tokenize” to a single token&lt;/h4&gt;

&lt;p&gt;The job of a &lt;em&gt;tokenizer&lt;/em&gt; is to decide how to split your input into individual tokens (often “words”), which are then munged by any filters you’re applying.&lt;/p&gt;

&lt;p&gt;For the case of an ID, &lt;em&gt;we don’t want to tokenize&lt;/em&gt;. At least at this juncture, I’m not trying to extract multiple valid IDs out of a single string; I’m just trying to determine if there’s a valid ID in there somewhere and throwing everything else away.&lt;/p&gt;

&lt;p&gt;In other words, I’m going to treat the input as a &lt;em&gt;single token&lt;/em&gt;, and then munge the bejeebers out of it in order to get what I want.&lt;/p&gt;

&lt;p&gt;In the Solr world, that leads us to the confusingly-named &lt;a href=&quot;http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.KeywordTokenizerFactory&quot;&gt;KeywordTokenizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: exactly what we started with&lt;/p&gt;

&lt;h4 id=&quot;step-2-find-the-first-thing-that-looks-like-an-id-and-mark-it&quot;&gt;Step 2: Find the first thing that looks like an ID and mark it&lt;/h4&gt;

&lt;p&gt;I primarily work in Ruby and Perl, which means the dramatic abuse of regular expressions is just part of my daily life.&lt;/p&gt;

&lt;p&gt;Line 5 is our first use of a regexp in the filter chain via &lt;a href=&quot;http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.PatternReplaceFilterFactory&quot;&gt;PatternReplaceFilterFactory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find something that looks like a match&lt;/li&gt;
  &lt;li&gt;If found, get rid of everything else, and throw a ‘***’ onto the beginning so later on I can tell if I matched or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second step is a little…odd…but necessary because I need a way to know if I found a candidate ID or not. If I did, well, there will be three asterisks on the front of the string from here on out. If not, there won’t.&lt;/p&gt;

&lt;p&gt;This is a little confusing as these things go, so I’ll break it down.&lt;/p&gt;

&lt;p&gt;Line 6: the match:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Skip any amount of stuff we don’t care about (.*?)&lt;/li&gt;
  &lt;li&gt;Match a number (\p{N}) (that’s unicode regexp syntax, if you haven’t seen it)&lt;/li&gt;
  &lt;li&gt;Match a string of at least 6 numbers and dashes&lt;/li&gt;
  &lt;li&gt;Close with an optional X or x [Xx]?&lt;/li&gt;
  &lt;li&gt;…and any trailing bits until the end of the string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So…&lt;em&gt;[number][six numbers/dashes][optional X]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At minimum, that’s seven digits/dashes.&lt;/p&gt;

&lt;p&gt;Line 7: replacement&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace the whole string (note how I anchored the match with ^ and $?) with whatever was matched inside the parentheses (represented here by $1) after prepending a set of three asterisks ‘***’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: If we found a candidate ID, we have that string prepended by ‘***’. Otherwise, we have exactly what we started with.&lt;/p&gt;

&lt;h4 id=&quot;step-3-if-we-didnt-find-a-match-throw-it-all-away&quot;&gt;Step 3: If we didn’t find a match, throw it all away&lt;/h4&gt;

&lt;p&gt;Line 9 shows an attempt to match on any string that start with an asterisk (which we’re pretty sure we won’t see because that’s illegal lucene wildcard syntax). If we have a string that doesn’t start with an asterisk, then throw the whole damn thing away because we don’t have a candidate ID anyway.&lt;/p&gt;

&lt;p&gt;[There’s a strong argument to be made that using an asterisk as the tagging character is a bad choice. Anyone have suggestions?]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: Either a candidate ID string preceded by ‘***’ or the empty string.&lt;/p&gt;

&lt;h4 id=&quot;step-4-ditch-the--used-to-mark-a-candidate-id&quot;&gt;Step 4: Ditch the ‘***’ used to mark a candidate ID&lt;/h4&gt;

&lt;p&gt;Lines 10-11&lt;/p&gt;

&lt;p&gt;Find the ‘***’ and throw it away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: The raw candidate ID string or the empty string.&lt;/p&gt;

&lt;h4 id=&quot;step-5-lowercase-it&quot;&gt;Step 5: Lowercase it&lt;/h4&gt;

&lt;p&gt;Line 12.&lt;/p&gt;

&lt;p&gt;By ‘it’ I mean “any X that might be trailing the ID”; we should have thrown everything else away by now. (Note: could have done this with a PattenReplace as well, obviously; not sure why’d I’d choose one over the other).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: The raw candidate ID string with its optional trailing ‘X’ lowercased, or the empty string&lt;/p&gt;

&lt;h4 id=&quot;step-6-get-rid-of-everything-thats-not-a-number-or-an-x&quot;&gt;Step 6: Get rid of everything that’s not a number or an ‘x’&lt;/h4&gt;

&lt;p&gt;Lines 13-15&lt;/p&gt;

&lt;p&gt;Ditch any dashes that are remaining. I’m doing it like this instead of just ditching the dashes because I’ll likely modify this at some point to allow, e.g., periods between numbers, or maybe spaces. This is safer.&lt;/p&gt;

&lt;p&gt;Note the extra parameter (replace=”all”), indicating that I want to replace all occurrences. This hasn’t been an issue until now because I’ve been careful to match the entire string by anchoring the pattern at the beginning (‘^’) and end (‘$’).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: A string of numbers possibly followed by an ‘x’, or the empty string.&lt;/p&gt;

&lt;h4 id=&quot;step-7-make-sure-what-we-have-is-a-reasonable-length&quot;&gt;Step 7: Make sure what we have is a reasonable length&lt;/h4&gt;

&lt;p&gt;Line 16&lt;/p&gt;

&lt;p&gt;Now that we’ve gotten rid of the dashes, we need to make sure we have enough digits left to make a valid identifier.&lt;/p&gt;

&lt;p&gt;If we didn’t match originally, it quickly got reduced to the empty string, and that will disappear here due to having length 0.&lt;/p&gt;

&lt;p&gt;It’s also possible that our initial match was, say, ‘1—-3—–6—7’, which will at this point have been reduced to just ‘1367’ – too short for our taste.&lt;/p&gt;

&lt;p&gt;In this version, I allow strings of any length between 7 (old OCLC number) and 14 (barcode).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: A string consisting purely of 7-14 characters, the last of which may be an ‘x’, or nothing at all (e.g., nothing will get indexed).&lt;/p&gt;

&lt;h4 id=&quot;step-8-remove-leading-0s&quot;&gt;Step 8: Remove leading 0s&lt;/h4&gt;

&lt;p&gt;My ILS (Aleph) loves to zero-pad all its local identifiers. I’d rather get rid of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we have now&lt;/strong&gt;: What we had before, but with no leading zeros&lt;/p&gt;

&lt;h3 id=&quot;lets-try-it&quot;&gt;Let’s try it!&lt;/h3&gt;

&lt;p&gt;If you’re following along at home, get the latest version of the schema and try it!&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  cd solr_stupid_tricks
  git pull origin master
  java -jar start.jar

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;…and then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the analysis page at &lt;a href=&quot;http://localhost:8983/solr/admin/analysis.jsp?highlight=on&quot;&gt;http://localhost:8983/solr/admin/analysis.jsp?highlight=on&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set the first line of the form to use Field: &lt;strong&gt;type&lt;/strong&gt; and input &lt;em&gt;numericID&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Check the “verbose output” checkbox under &lt;em&gt;Field value: index&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Put in a test value and see what the analyzer gives you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those of you &lt;em&gt;not&lt;/em&gt; following along at home, here are the examples from waaaaaay at the top of this post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1234-5678 =&amp;gt; 12345678&lt;/li&gt;
  &lt;li&gt;123-4567-890 =&amp;gt; 1234567890&lt;/li&gt;
  &lt;li&gt;12-34-567-X =&amp;gt; 1234567x&lt;/li&gt;
  &lt;li&gt;0012-0045 =&amp;gt; 120045&lt;/li&gt;
  &lt;li&gt;ISBN13: 1234567890123 =&amp;gt; 1234567890123&lt;/li&gt;
  &lt;li&gt;ISSN: 1234567X (1998-99) =&amp;gt; 1234567x&lt;/li&gt;
  &lt;li&gt;ISSN (1998-99): 1234567X =&amp;gt; &lt;strong&gt;199899&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;1234567890 (hdk. 22 pgs) =&amp;gt; 1234567890&lt;/li&gt;
  &lt;li&gt;9 =&amp;gt; [nothing]&lt;/li&gt;
  &lt;li&gt;Behind the 3rd floor desk =&amp;gt; [nothing]&lt;/li&gt;
  &lt;li&gt;Henry VIII =&amp;gt; [nothing]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So…not too bad. We did miss one, mistaking a year range for a numeric ID, but if your data are that bad, there’s only so much we can do.&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Obviously, this is the tip of the iceberg with this sort of thing. And it can still be confused.&lt;/p&gt;

&lt;p&gt;But it &lt;em&gt;does&lt;/em&gt; follow our goal of having the exact same behavior on index and query, moving the logic to solr, and being pretty flexible.&lt;/p&gt;

&lt;p&gt;Perfect? No. Useful? Yes.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2012 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/03/solr-field-type-for-numericish-ids/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/03/solr-field-type-for-numericish-ids/</guid>
        
        <category>solr,</category>
        
        <category>Stupid</category>
        
        <category>Solr</category>
        
        <category>Tricks</category>
        
        
      </item>
    
      <item>
        <title>Stupid Solr tricks: Introduction (SST #0)</title>
        <description>&lt;p&gt;&lt;strong&gt;Completed parts of the series:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://robotlibrarian.billdueber.com/solr-field-type-for-numericish-ids/&quot;&gt;A Solr Field Type for numeric(ish) IDs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://robotlibrarian.billdueber.com/using-localparams-in-solr-sst-2/&quot;&gt;Using localparams in Solr (or, how to boost records that contain all terms)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://robotlibrarian.billdueber.com/requiringpreferring-searches-that-dont-span-multiple-values-sst-3/&quot;&gt;Requiring/Preferring searches that don’t span multiple values&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://robotlibrarian.billdueber.com/boosting-on-exactish-anchored-phrase-matching-in-solr-sst-4/&quot;&gt;Boosting on Exactish (anchored) phrase matching&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those of you who read this blog regularly (Hi Mom!) know that while we do a lot of stuff at the &lt;a href=&quot;http://lib.umich.edu&quot;&gt;University of Michigan Library&lt;/a&gt;, our bread-and-butter these days are projects that center around &lt;a href=&quot;http://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right now, my production Solr is running an ancient nightly of version 1.4 (i.e., before 1.4 was even officially released), and reflects how much I didn’t know when we first started down this path. My primary responsibility is for &lt;a href=&quot;http://mirlyn.lib.umich.edu&quot;&gt;Mirlyn&lt;/a&gt;, our catalog, but there’s plenty of smart people doing smart things around here, and I’d like to be one of them.&lt;/p&gt;

&lt;p&gt;Solr has since advanced to 3.x (with version 4 on the horizon), and during that time I’ve learned a lot more about Solr and how to push it around. More importantly, I’ve learned a &lt;em&gt;lot&lt;/em&gt; more about our data, the vagaries in the MARC/AACR2 that I process and how awful so much of it really is.&lt;/p&gt;

&lt;p&gt;So…starting today I’m going to be doing some on-the-blog experiments with a new version of Solr, reflecting some of the problems I’ve run into and ways I think we can get more out of Solr.&lt;/p&gt;

&lt;h3 id=&quot;premise-1-put-all-the-logic-you-possible-can-into-solr&quot;&gt;Premise 1: put all the logic you possible can into Solr&lt;/h3&gt;

&lt;p&gt;Much of what I’ll be doing is looking at new field type definitions that are appropriate (in my mind, anyway) for library data. Some of this stuff (e.g., normalizing ISBNs) would be a &lt;em&gt;lot&lt;/em&gt; easier to do in your indexing code.&lt;/p&gt;

&lt;p&gt;But then you’d have to do it again in your application to munge whatever is entered in the search box. And maybe it won’t be the same every time. Or maybe you don’t want to write a freakin’ parser to try to find anything that might look like an ISBN and mess with it.&lt;/p&gt;

&lt;p&gt;I take it as gospel that you should put all your logic into the solr field analysis chain, so the exact same thing is happening on index and on query. That way, even if it’s &lt;em&gt;wrong&lt;/em&gt;, at least it’ll be wrong in the exact same way and your users will find the stuff they’re looking for.&lt;/p&gt;

&lt;h3 id=&quot;premise-2-doing-it-crappily-is-better-than-not-doing-it-at-all&quot;&gt;Premise 2: Doing it crappily is better than not doing it at all.&lt;/h3&gt;

&lt;p&gt;Look, the &lt;em&gt;right&lt;/em&gt; way to do much of this stuff is by hacking on Solr itself, building custom field analyzers or filters or tokenizers that mess with the token chain and…&lt;/p&gt;

&lt;p&gt;Wait. I already lost myself, and probably you, too. At some point, I’m going to do an actual sample custom filter for the new Solr codebase (the stuff I did once before is out-of-date); the example will be LCCN normalization and you’ll be able to follow along with me on this blog.&lt;/p&gt;

&lt;p&gt;But in the meantime, we can do a lot of fairly ambitious stuff just by using and abusing the out-of-the-box stuff: pattern replacement filters, the existing tokenizers, etc. It might be ugly, and not very fast, but if I start getting the 200 hits a second that mean this is a bottleneck for me, I’ll be happy to deal with it then.&lt;/p&gt;

&lt;h3 id=&quot;premise-3-its-always-better-to-put-something-out-there-so-smart-people-can-tell-you-how-to-do-it-right&quot;&gt;Premise 3: It’s always better to put &lt;em&gt;something&lt;/em&gt; out there so smart people can tell you how to do it &lt;em&gt;right&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;One of the disappointments in my life right now is that there isn’t more formal and informal discussion about what people are doing/trying. I’m sure it’s out there, but some of it is buried in a sea of application-level crap, and much of it is ignored by the people that really understand the data.&lt;/p&gt;

&lt;p&gt;With luck, I’ll get comments from folks who really know their stuff and can tell me, in excruciating detail, exactly how I &lt;em&gt;don’t&lt;/em&gt;. Please: correct me. I might not be the brightest guy in the room, but I know enough to try to outsource my thinking.&lt;/p&gt;

&lt;h3 id=&quot;follow-along-at-home&quot;&gt;Follow along at home!&lt;/h3&gt;

&lt;h4 id=&quot;option-1-build-your-own-current-trunk-solr&quot;&gt;Option 1: Build your own current-trunk Solr&lt;/h4&gt;

&lt;p&gt;If you want to follow along at home, you’ll need a copy of the current source (not the 3.5 stable, since I use things like the ICUTokenizer coming in 3.6 / 4.0), which you can find and build from the Solr site.&lt;/p&gt;

&lt;h4 id=&quot;option-2-just-use-what-im-using&quot;&gt;Option 2: Just use what I’m using&lt;/h4&gt;

&lt;p&gt;Alternately, if you’re lazy (and who isn’t??), I’ve provided a &lt;a href=&quot;https://billdueber@github.com/billdueber/solr_stupid_tricks&quot;&gt;github repo&lt;/a&gt; of the standard solr “example” directory you can nab and run on your own java-equipped machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: the git repo is currently 60MB or so&lt;/strong&gt;.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  git clone https://billdueber@github.com/billdueber/solr_stupid_tricks.git
  cd solr_stupid_tricks
  java -jar start.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…and then head to your local &lt;a href=&quot;http://localhost:8983/solr/admin/&quot;&gt;Solr Admin page&lt;/a&gt; page on port 8983 to check things out. We’ll be spending most of our time in &lt;a href=&quot;http://localhost:8983/solr/admin/analysis.jsp&quot;&gt;the analysis tab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll get the first post in the series up later today, and then every few days as I think of more things to talk about. I hope you’ll join me!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Feb 2012 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/02/stupid-solr-tricks-introduction/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/02/stupid-solr-tricks-introduction/</guid>
        
        <category>solr,</category>
        
        <category>Stupid</category>
        
        <category>Solr</category>
        
        <category>Tricks</category>
        
        
      </item>
    
      <item>
        <title>Another short personal note</title>
        <description>&lt;p&gt;The baby spent all last week in the hospital. Nothing life-threatening (so long as he was in the hospital and could get O2 when needed); it was just annoying.&lt;/p&gt;

&lt;p&gt;So….here’s to a week-long hospital stay being able to be merely “annoying”. A tip of the hat to steady employment, generous sick/vacation policies, flexible co-workers, excellent insurance, and having a world-class hospital in town. This could have been a much, much worse week than it was.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2012 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2012/02/another-short-personal-note/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2012/02/another-short-personal-note/</guid>
        
        <category>personal</category>
        
        
      </item>
    
      <item>
        <title>Solr and boolean operators</title>
        <description>&lt;p&gt;[Summary: &lt;strong&gt;ALWAYS ALWAYS ALWAYS USE PARENTHESES TO GROUP BOOLEANS IN SOLR!!!&lt;/strong&gt;]&lt;/p&gt;

&lt;p&gt;What does Solr do, given the following query?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  a OR b AND c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll give you three guesses, but you’ll get the first two wrong&lt;br /&gt;
and won’t have any idea how to generate a third, so don’t spend too much time on it.&lt;/p&gt;

&lt;h3 id=&quot;boolean-algebra-and-operator-precedence&quot;&gt;Boolean algebra and operator precedence&lt;/h3&gt;

&lt;p&gt;Anyone who’s had even a passing introduction to boolean alegebra knows that it specifies a strict order to how the operators are bound: NOT before AND before OR. So, one might expect the following grouping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  a OR (b AND c)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s guess one. It’s not how Solr does it.&lt;/p&gt;

&lt;h3 id=&quot;left-to-right&quot;&gt;Left to right?&lt;/h3&gt;

&lt;p&gt;Some naive students, and at least one programming language (Smalltalk), do a simple left-to-right evaluation. So you might go with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  (a OR b) AND c

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope. Wrong again.&lt;/p&gt;

&lt;h3 id=&quot;so-whats-left&quot;&gt;So what’s left???&lt;/h3&gt;

&lt;p&gt;Excellent question. I don’t know the code well enough to know what’s going on underneath, but here’s what we get under the lucene query parser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    (b AND c)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s right. The first term is thrown away.(More correctly, the first term is deemed “optional”).&lt;/p&gt;

&lt;h3 id=&quot;do-you-let-your-users-put-andornot-in-their-queries&quot;&gt;Do you let your users put AND/OR/NOT in their queries?&lt;/h3&gt;

&lt;p&gt;Hopefully, they don’t know any boolean algebra. If they do, hopefully they use parentheses, or you parse it out for them. And if not, well, they’re gonna be pretty damn confused.&lt;/p&gt;

&lt;h3 id=&quot;it-gets-weirder&quot;&gt;It gets weirder&lt;/h3&gt;

&lt;p&gt;I populated a fresh solr (3.5) index with all possible subsets of the strings “curly”, “larry”, “moe”, and “shemp” (not Joe. Don’t talk to me about Joe). There are 15 of them, from the one-item ‘curly’ to all four at once.&lt;/p&gt;

&lt;p&gt;I wrote a script to run a set of queries against the index under both lucene and edismax to see what I would get. In all cases the default lucene operator is ‘AND’ and the edismax mm parameter is set to 100% (equivalent to “all required”).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
        Lucene                    EDismax
  -------------------------------------------------------

  1. curly AND larry
        curly larry               curly larry
        curly larry moe           curly larry moe
        curly larry shemp         curly larry shemp
        curly larry moe shemp     curly larry moe shemp

  2. curly AND larry OR moe
        curly                     curly larry
        curly larry               curly larry moe
        curly moe                 curly larry shemp
        curly shemp               curly larry moe shemp
        curly larry moe
        curly larry shemp
        curly moe shemp
        curly larry moe shemp

  3. curly OR larry AND moe
        larry moe                 larry moe
        curly larry moe           curly larry moe
        larry moe shemp           larry moe shemp
        curly larry moe shemp     curly larry moe shemp

  4. curly AND larry OR moe AND shemp
        curly moe shemp           curly larry moe shemp
        curly larry moe shemp

  5. moe AND shemp OR curly AND larry
        curly larry moe           curly larry moe shemp
        curly larry moe shemp


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Query 1 is as expected. Query 2 apparently reduces to just ‘curly’ under the lucene parser and ‘curly AND larry’ under edismax (and query 3 similarly reduces to the two AND’d words). Queries 4 and 5 are…well, you can look at the debugQuery output to see what it gets, but not &lt;strong&gt;why&lt;/strong&gt;. And then tell me how to explain it to a user.&lt;/p&gt;

&lt;h3 id=&quot;where-does-this-leave-us&quot;&gt;Where does this leave us?&lt;/h3&gt;

&lt;p&gt;The good news is that both lucene and edismax behave predictably when you use parentheses for grouping. So do that.&lt;/p&gt;

&lt;p&gt;I’m generally not one to complain about open-source software, at least partially because I don’t have the chops to do anything about it most of the time, but I don’t understand how this could seem OK to anyone. There are a couple lucene Jira tickets (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-167&quot;&gt;Lucene-167&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1823&quot;&gt;Lucene-1823&lt;/a&gt;) and a &lt;a href=&quot;http://www.mail-archive.com/java-user@lucene.apache.org/msg00008.html&quot;&gt;2005 mailing list thread&lt;/a&gt; denouncing the current behavior, but it persists.&lt;/p&gt;

&lt;p&gt;Until the Solr/Lucene powers that be decide to tackle this, the rest of us will either have to write pre-parsers to make sure users get something sensible, or cripple our applications to disallow unrestricted boolean queries.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Dec 2011 00:00:00 -0500</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/12/solr-and-boolean-operators/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/12/solr-and-boolean-operators/</guid>
        
        
      </item>
    
      <item>
        <title>A short personal note</title>
        <description>&lt;p&gt;We had another baby. :-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-vauzuyHW3og/To5hGeNC-9I/AAAAAAAAG-k/xEs3THGMvi0/s1600/IMG_6984.JPG&quot;&gt;&lt;img class=&quot;aligncenter&quot; title=&quot;Shai Brown Dueber&quot; src=&quot;http://4.bp.blogspot.com/-vauzuyHW3og/To5hGeNC-9I/AAAAAAAAG-k/xEs3THGMvi0/s320/IMG_6984.JPG&quot; alt=&quot;Shai Brown Dueber&quot; width=&quot;213&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shai Brown Dueber was born last Monday, the 3rd, at a very moderate 7lbs 7.2oz (his brothers were 9lbs and 9.5lbs). Mother, baby, and older brothers are all doing well. Father is freakin’ tired.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-aS_9RVJ_nNU/To5hGPqqN7I/AAAAAAAAG-c/sHqJbsHPYVM/s1600/IMG_6953.JPG&quot;&gt;&lt;img class=&quot;aligncenter&quot; title=&quot;Ziv, Nadav, and Shai&quot; src=&quot;http://3.bp.blogspot.com/-aS_9RVJ_nNU/To5hGPqqN7I/AAAAAAAAG-c/sHqJbsHPYVM/s320/IMG_6953.JPG&quot; alt=&quot;Ziv, Nadav, and Shai&quot; width=&quot;320&quot; height=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/10/a-short-personal-note/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/10/a-short-personal-note/</guid>
        
        <category>personal</category>
        
        
      </item>
    
      <item>
        <title>Even better, even simpler multithreading with JRuby</title>
        <description>&lt;p&gt;[Yes, another post about ruby code; I’ll get back to library stuff soon.]&lt;/p&gt;

&lt;p&gt;Quite a while ago, I released a little gem called &lt;em&gt;&lt;a href=&quot;https://rubygems.org/gems/threach&quot;&gt;threach&lt;/a&gt;&lt;/em&gt; (for “threaded #each”). It allows you to easily process a block with multiple threads.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# Process a CSV file with three threads&lt;/span&gt;
  &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;FIle&lt;/span&gt;.open(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;data.csv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;).threach(&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;, &lt;span style=&quot;color:#A60&quot;&gt;:each_line&lt;/span&gt;) {|line| send_to_db(line)}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Nice, right?&lt;/p&gt;

&lt;p&gt;The problem is that I could never figure out a way to deal with a &lt;code&gt;break&lt;/code&gt; or an &lt;code&gt;Exception&lt;/code&gt; raised inside the block. The core problem is that once a thread trying to push/pop from a ruby &lt;code&gt;SizedQueue&lt;/code&gt; is blocking, there’s no way (I could find) to tell it to wake up and see if there’s an error from another thread floating around that needs to be addressed.&lt;/p&gt;

&lt;p&gt;So, I got into a pattern of running my code with &lt;code&gt;each&lt;/code&gt; for a while, debugging, and eventually doing the production run under &lt;code&gt;threach&lt;/code&gt;. Which is just dumb. Then I’d try to re-write &lt;code&gt;threach&lt;/code&gt; to deal with this stuff using different approach (mutexes, lightweight events), quickly (or not so quickly) fail, give up, and start again.&lt;/p&gt;

&lt;p&gt;So…let’s not worry MRI for the moment. I run all my big jobs under JRuby these days anyway, and there I can take advantage of Java’s blocking queues that have timeouts. When a queue operation times out, I can check to see if there’s been a break or an exception thrown in the meantime and behave appropriately.&lt;/p&gt;

&lt;p&gt;The result is the gem &lt;code&gt;&lt;a href=&quot;https://rubygems.org/gems/jruby_threach&quot;&gt;jruby_threach&lt;/a&gt;&lt;/code&gt;. It works just like &lt;code&gt;threach&lt;/code&gt;, except that, you know, it actually works the way I’d like it to.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jruby_threach&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;FIle&lt;/span&gt;.open(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;data.csv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;).threach(&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;, &lt;span style=&quot;color:#A60&quot;&gt;:each_line&lt;/span&gt;) {|line| send_to_db(line)}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Looks familiar, doesn’t it.&lt;/p&gt;

&lt;p&gt;But you can also break out of the loop.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
myarray.threach(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |item|
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;break&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; item_indicates_to_break(item)
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; item == &lt;span style=&quot;color:#A60&quot;&gt;:really_bad_value&lt;/span&gt;
    raise &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;RuntimeError&lt;/span&gt;.new, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Something&#39;s really wrong&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
  process_item(item)
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Any exceptions that are &lt;code&gt;rescue&lt;/code&gt;d within the block are handled internally and don’t cause processing to stop. Any that are &lt;em&gt;not&lt;/em&gt; handled within the block are noticed by &lt;code&gt;threach&lt;/code&gt;, cause the processing to stop, and the re-raised so you can deal with them outside of &lt;code&gt;threach&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;

reader = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;SpecializedFileReader&lt;/span&gt;.new(filename)

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;begin&lt;/span&gt;
  reader.threach(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |item|
    process_item(item)
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;rescue&lt;/span&gt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;SpecializedFileReaderError&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# deal with the fact that the reader failed&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;rescue&lt;/span&gt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Exception&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# deal with the problem processing the item&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Dealing with the underlying Java data structures makes life a lot easier. To the point that I added an enhancement – threading production as well.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# Use two threads to read lines from files, and another three threads&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# to process the data that comes out of those files.&lt;/span&gt;
  &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Dir&lt;/span&gt;.glob(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*.csv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).map{|f| &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;File&lt;/span&gt;.open(f)}.mthreach(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |item|
    send_item_to_datbase(item)
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;mthreach&lt;/code&gt; basically allows you to treat an array of Enumerables as a single logical entity, multithreading both the producer and consumer sides of the operation. There aren’t a whole lot of obvious use cases, but it can certainly come in handy.&lt;/p&gt;

&lt;p&gt;You can also access the underlying class that aggregates multiple enumerables directly.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jruby_threach&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
me = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Threach&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MultiEnum&lt;/span&gt;.new(
  [enum1, enum2, enum3], &lt;span style=&quot;color:#777&quot;&gt;# enumerables&lt;/span&gt;
  threads,               &lt;span style=&quot;color:#777&quot;&gt;# How many threads to use to&lt;/span&gt;
  &lt;span style=&quot;color:#A60&quot;&gt;:each_with_index&lt;/span&gt;,      &lt;span style=&quot;color:#777&quot;&gt;# the iterator to call on the enumerables&lt;/span&gt;
  size                   &lt;span style=&quot;color:#777&quot;&gt;# size of the under-the-hood queue&lt;/span&gt;
)

&lt;span style=&quot;color:#777&quot;&gt;# Note that like threach, calling #each against an MultiEnum actually&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;# calls the iterator you sent in (in this case, #each_with_index)&lt;/span&gt;
me.each {|item| process_item(item)}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 01 Jul 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/07/even-better-even-simpler-multithreading-with-jruby/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/07/even-better-even-simpler-multithreading-with-jruby/</guid>
        
        <category>jruby,</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Using SQLite3 from JRuby without ActiveRecord</title>
        <description>&lt;p&gt;I spent way too long asking my friend, The Internet, how to get a normal DBI connection to SQLIte3 using JRuby. Apparently, everyone except me is &lt;a href=&quot;http://jruby-extras.rubyforge.org/activerecord-jdbc-adapter/&quot;&gt;using ActiveRecord and/or Rails&lt;/a&gt; and doesn’t &lt;em&gt;want&lt;/em&gt; to just connect to the database.&lt;/p&gt;

&lt;p&gt;But I do. Here’s how.&lt;/p&gt;

&lt;p&gt;First, get the gems:&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
  gem install dbi
  gem install dbd-jdbc
  gem install jdbc-sqlite3

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then you’re ready to load it up into DBI.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rubygems&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;# if you&#39;re using 1.8 still&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dbi&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dbd/jdbc&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdbc/sqlite3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;

databasefile = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.db&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
dbh = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;DBI&lt;/span&gt;.connect(
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DBI:jdbc:sqlite:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;#{&lt;/span&gt;databasefile&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,  &lt;span style=&quot;color:#777&quot;&gt;# connection string&lt;/span&gt;
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,                                 &lt;span style=&quot;color:#777&quot;&gt;# no username for sqlite3&lt;/span&gt;
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,                                 &lt;span style=&quot;color:#777&quot;&gt;# no password for sqlite3&lt;/span&gt;
  &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;driver&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;org.sqlite.JDBC&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)      &lt;span style=&quot;color:#777&quot;&gt;# need to set the driver&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;# That&#39;s it. Everything below here is stock DBI&lt;/span&gt;

dbh.do &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;create table squares (i integer, isquared integer)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

ins = dbh.prepare(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;insert into squares values (?, ?)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;..&lt;span style=&quot;color:#00D&quot;&gt;20&lt;/span&gt;).each &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |i|
  ins.execute(i, i*i)
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 26 May 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/05/using-sqlite3-from-jruby-without-activerecord-2/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/05/using-sqlite3-from-jruby-without-activerecord-2/</guid>
        
        <category>jruby</category>
        
        
      </item>
    
      <item>
        <title>How good is our relevancy ranking?</title>
        <description>&lt;p&gt;For those of us that spend our days trying to tweak &lt;a title=&quot;Mirlyn -- The University of Michigan Library Catalog&quot; href=&quot;http://mirlyn.lib.umich.edu/&quot;&gt;Mirlyn&lt;/a&gt; to make it better, one of the most important  – and, in many ways, most opaque – questions is, “How good is our relevancy ranking?”&lt;/p&gt;

&lt;p&gt;Research from the UMich Library’s Usability Group (&lt;a href=&quot;http://www.lib.umich.edu/files/services/usability/MirlynSearchSurvey_Feb2011.pdf&quot;&gt;pdf; 600k&lt;/a&gt;) points to the importance of relevancy ranking  for both known-item searches and discovery, but mapping search terms to the “best” results involves crawling deep inside the searcher’s head to know what she’s looking for.&lt;/p&gt;

&lt;p&gt;So, what can we do?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Record interaction as a way of showing interest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One possibility is to look at those records that are somehow “touched” by a user in such a way that we can log it. If a user bothers to interact with an individual record, we’ll assume the record is interesting to her in the context of the current search.&lt;/p&gt;

&lt;p&gt;There are three links associated with an individual record that a user can click on from the search results:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(62% of all record interactions) The title&lt;/li&gt;
	&lt;li&gt;(28%) An external link (HathiTrust, Google Books, or one of our vendors)&lt;/li&gt;
	&lt;li&gt;(10%) The &quot;see holdings&quot; link for those items that have multiple holdings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our first issue arises quickly: only about a quarter of Mirlyn sessions contain any of these actions. For a full 75% of sessions, we have no data about which records users are paying attention to. They get a call number – or determine they have a failed search –  and move on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where on the page do users interact with items?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We don’t know how users that interact with items differ from those that don’t. But for those that do, more than half of all record interactions are with the first record.&lt;/p&gt;

&lt;p&gt;Here are the numbers for the first five records:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;First record: 54%&lt;/li&gt;
	&lt;li&gt;Second record: 12%&lt;/li&gt;
	&lt;li&gt;Third record: 6%&lt;/li&gt;
	&lt;li&gt;Fouth record: 3.7%&lt;/li&gt;
	&lt;li&gt;Fifth record: 2.5%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More than 75% of all record interactions are with the first four items on the first page of results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it all mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Frustratingly, we don’t know. Several possibilities are obvious:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we&#39;re doing a good job with relevancy ranking&lt;/li&gt;
	&lt;li&gt;people do mostly known-item searches&lt;/li&gt;
	&lt;li&gt;people don&#39;t bother looking past the first few results&lt;/li&gt;
	&lt;li&gt;excellent general search engines (e.g., Google) have trained people to believe that the first result is always worth a closer look.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The interactions between these (and unknown other) factors are likely complex.&lt;/p&gt;

&lt;p&gt;In the meantime, though, to the extent these data can be extended to the general case (not at all obvious), we’re not doing too bad of a job.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/05/how-good-is-our-relevancy-ranking/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/05/how-good-is-our-relevancy-ranking/</guid>
        
        
      </item>
    
      <item>
        <title>Ruby gem library_stdnums goes to version 1.0</title>
        <description>&lt;p&gt;I just released another (this time pretty good) version of my gem for normalizing/validating library standard numbers, &lt;code&gt;library_stdnums&lt;/code&gt; (&lt;a href=&quot;https://github.com/billdueber/library_stdnums&quot;&gt;github source&lt;/a&gt; / &lt;a href=&quot;http://rubydoc.info/github/billdueber/library_stdnums/master/frames&quot;&gt;docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The short version of the functions available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ISBN&lt;/strong&gt;: get checkdigit, validate, convert isbn10 to/from isbn13, normalize (to 13-digit)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ISSN&lt;/strong&gt;: get checkdigit, validate, normalize&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LCCN&lt;/strong&gt;: validate, normalize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Validation of LCCNs doesn’t involve a checkdigit; I basically just normalize whatever is sent in and then see if the result is syntactically valid.&lt;/p&gt;

&lt;p&gt;My plan in my Copious Free Time is to do a Java version of these as well and then stick them into a new-style Solr v.3 filter so I (and, by extension, you, if you’re interested) can have Solr do normalization during both index and search time.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/05/ruby-gem-library_stdnums-goes-to-version-1-0/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/05/ruby-gem-library_stdnums-goes-to-version-1-0/</guid>
        
        <category>librarian</category>
        
        <category>code,</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>A short ruby diversion: cost of flow control under Ruby</title>
        <description>&lt;p&gt;A couple days ago I decided to finally get back to working on &lt;a href=&quot;https://github.com/billdueber/threach&quot;&gt;&lt;code&gt;threach&lt;/code&gt;&lt;/a&gt; to try to deal with problems it had – essentially, it didn’t deal well with non-local exits due to calls to &lt;code&gt;break&lt;/code&gt; or even something simple like a &lt;code&gt;NoMethodError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;[BTW, I think I managed it. As near as I can tell, &lt;code&gt;threach&lt;/code&gt; version 0.4 won’t deadlock anymore]&lt;/p&gt;

&lt;p&gt;Along the way, while trying to figure out how threads affect the behavior of different non-local exits, I noticed that in some cases there was still work being done by one or more threads long after there was an exception raised.&lt;/p&gt;

&lt;p&gt;I re-discovered something that a lot of people already know: &lt;code&gt;raise&lt;/code&gt;/&lt;code&gt;rescue&lt;/code&gt; under MRI is slow, and under JRuby can be &lt;em&gt;unbearably&lt;/em&gt; slow. How slow?&lt;/p&gt;

&lt;p&gt;Let’s look at four simple blocks that exercise four different block exit strategies: &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;raise&lt;/code&gt; with the normal single (or zero) arguments, as well as the three-argument version of &lt;code&gt;raise&lt;/code&gt;.&lt;/p&gt;

&lt;table class=&quot;data&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Simple break&lt;/th&gt;&lt;th&gt;Catch/Throw&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;pre lang=&quot;ruby&quot;&gt;
range.each do |i|
  break
end
      &lt;/pre&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;pre lang=&quot;ruby&quot;&gt;
catch(:benchmarking) do  
 range.each do |i|
   throw(:benchmarking)
 end
end
      &lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Raise (1 arg)&lt;/th&gt;&lt;th&gt;Raise (3 args)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;pre lang=&quot;ruby&quot;&gt;
 begin
   range.each do |i|
     raise StandardError
   end
 rescue
  # do nothing
 end
     &lt;/pre&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;pre lang=&quot;ruby&quot;&gt;
begin
  range.each do |i|
    raise StandardError, :hi, nil
  end
rescue
 # do nothing
end
      &lt;/pre&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In each case, we immediately exit the block without doing any work; the idea is to measure how long it takes to break out for each case.&lt;/p&gt;

&lt;p&gt;So….let’s run them each 100K times and see what happens, shall we? Times are in seconds, averaged over two runs.&lt;/p&gt;

&lt;table class=&quot;data&quot; id=&quot;t&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;&lt;th&gt;Ruby 1.8&lt;/th&gt;&lt;th&gt;Ruby 1.9&lt;/th&gt;&lt;th&gt;JRuby&lt;/th&gt;&lt;th&gt;JRuby --1.9&lt;/th&gt;
  &lt;/tr&gt;  
  &lt;tr&gt;&lt;th&gt;break&lt;/th&gt;        &lt;td&gt;0.12&lt;/td&gt;&lt;td&gt;0.07&lt;/td&gt;&lt;td&gt;0.29&lt;/td&gt; &lt;td&gt;0.21&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;catch/throw&lt;/th&gt;  &lt;td&gt;0.35&lt;/td&gt;&lt;td&gt;0.28&lt;/td&gt;&lt;td&gt;0.64&lt;/td&gt; &lt;td&gt;0.48&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;raise (1 arg)&lt;/th&gt;&lt;td&gt;1.78&lt;/td&gt;&lt;td&gt;2.10&lt;/td&gt;&lt;td class=&quot;bad&quot;&gt;26.60&lt;/td&gt;&lt;td class=&quot;bad&quot;&gt;22.06&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;raise (3 arg)&lt;/th&gt;&lt;td&gt;1.85&lt;/td&gt;&lt;td&gt;2.13&lt;/td&gt;&lt;td&gt;0.45&lt;/td&gt; &lt;td&gt;0.45&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The first thing to note is that this is 100K iterations. Three of the strategies are fast enough that you’d have to work really, really hard to notice them.&lt;/p&gt;

&lt;p&gt;In terms of speed, &lt;code&gt;raise (3 args)&lt;/code&gt;, &lt;code&gt;catch/throw&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; are fast enough that you shouldn’t bother worrying about them (although you &lt;em&gt;should&lt;/em&gt; choose the method that makes your code easy to understand).&lt;/p&gt;

&lt;p&gt;The second things to note is &lt;em&gt;Holy Camoli!&lt;/em&gt; JRuby is slow there!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.codehaus.org/browse/JRUBY-5534&quot;&gt;This Jira ticket&lt;/a&gt; tells the tale: The creation of the backtrace is very, very expensive for JRuby. That &lt;code&gt;nil&lt;/code&gt; at the end of the &lt;code&gt;raise (3 args)&lt;/code&gt; call suppresses the creation of that backtrace, so the speed is fine.&lt;/p&gt;

&lt;p&gt;Three things worth saying here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re using &lt;code&gt;raise/rescue&lt;/code&gt; for flow control, &lt;em&gt;you’re already doing it wrong.&lt;/em&gt; Reserve exceptions for, well, exceptional conditions that are only going to be raised once or twice, not all the time.&lt;/li&gt;
  &lt;li&gt;If you’re writing code that, for some ungodly reason, is planning on raising a crapload of exceptions, use the three-arg version. I’m looking at you, gem authors.&lt;/li&gt;
  &lt;li&gt;If you’re writing your code without worrying about how it will work under multiple threads, well, please don’t do that. Everyone has multi-core systems these days, and it’s silly to not be able to use them. Plus, counting on Matz to never move to a VM with real threads is a big gamble.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 03 May 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/05/a-short-ruby-diversion-cost-of-flow-control-under-ruby/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/05/a-short-ruby-diversion-cost-of-flow-control-under-ruby/</guid>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>ISBN parenthetical notes: Bad MARC data #1</title>
        <description>&lt;p&gt;Yesterday, I gave a brief overview of &lt;a href=&quot;http://robotlibrarian.billdueber.com/why-programmers-hate-free-text-in-marc-records/&quot;&gt;why free text is hard to deal with&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, I’m turning my attention to a concrete example that drives me absolutely batshit crazy: taking a perfectly good unique-id field (in this case, the ISBN in the 020) and appending stuff onto the end of it.&lt;/p&gt;

&lt;p&gt;The point is not to mock anything. Mocking will, however, be included for free.&lt;/p&gt;

&lt;h3 id=&quot;whats-supposed-to-be-in-the-020&quot;&gt;What’s supposed to be in the 020?&lt;/h3&gt;

&lt;p&gt;Well, for starters, an ISBN (10 or 13 digit, we’re not picky).&lt;/p&gt;

&lt;p&gt;Let’s not worry, for the moment, about the actual ISBN and whether it’s valid or not.&lt;/p&gt;

&lt;p&gt;Wait, no, let’s go ahead and worry about it. It’s an easy enough script to write, although it takes a while to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8,630,794  Total records
3,220,666  Total 020a&#39;s
    6,498  020a&#39;s that don&#39;t obviously contain an ISBN
    8,407  that look like an ISBN but fail checksum test:
... so 0.26% of the ISBNs have invalid checksums
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, not bad at all, especially considering some of those are known to be bad, but are transcribed dutifully from the actual (mis-)printed book.&lt;/p&gt;

&lt;p&gt;A lot of the malformed data (anything from which I can’t seem to extract something that looks like an ISBN) is pricing data, and most of it appears in system numbers that are close enough to each other that I presume it was just a bad batch.&lt;/p&gt;

&lt;h3 id=&quot;whats-goes-after-the-isbn-in-the-020&quot;&gt;What’s goes after the ISBN in the 020?&lt;/h3&gt;

&lt;p&gt;I’m no cataloger, of course, but it looks to me like the answer is “Something about how the book is bound together, or the publisher, unless you want to put something else there, and then, really, go ahead, because it’s not like anyone is ever going to want to parse this out, all we need to do is print cards with it for god’s sake.”&lt;/p&gt;

&lt;p&gt;No, I kid, I kid! The actual rules are in &lt;a href=&quot;http://sites.google.com/site/opencatalogingrules/aacr2-chapter-1/1-8-standard-number-and-terms-of-availability-area&quot;&gt;Library of Congress Rule Interpretation 1.8&lt;/a&gt;, which reads, in part:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a hardbound resource, there is no attempt to use a consistent term other than to use one that conveys the condition intelligibly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it’s important to read that a second time, because it succinctly conveys the culture in which these rules were devised.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t worry about consistency, because your only reader is human.&lt;/li&gt;
  &lt;li&gt;Defer to the cataloger.&lt;/li&gt;
  &lt;li&gt;Being complete is more important than being consistent.&lt;/li&gt;
  &lt;li&gt;Base your notes on your subjective view of the actual, physical item you’re presumed to be holding in your hands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interestingly (to me, anyway), it looks like the &lt;a href=&quot;http://www.oclc.org/bibformats/en/0xx/020.shtm&quot;&gt;OCLC once had a (now deprecated) &lt;code&gt;$$b&lt;/code&gt; subfield for binding information&lt;/a&gt;. Apparently it didn’t catch on.&lt;/p&gt;

&lt;h3 id=&quot;what-did-i-find&quot;&gt;What did I find?&lt;/h3&gt;

&lt;p&gt;So, let’s pretend I’d like to be able to differentiate between paperback and hardbound books. Probably useful, yes?&lt;/p&gt;

&lt;p&gt;I went ahead and took all parenthetical notes from any field in the 020, split them on colon (‘cause that seems to be the way they roll) and did some basic normalization:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminate numbers (so ‘vol. 1’ and ‘vol. 2’ count as only one pattern)&lt;/li&gt;
  &lt;li&gt;Lowercase everything&lt;/li&gt;
  &lt;li&gt;Turn runs of spaces into a single space&lt;/li&gt;
  &lt;li&gt;Trim leading/trailing spaces&lt;/li&gt;
  &lt;li&gt;Remove any trailing punctuation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found 1,506,729 parenthetical remarks in the 020 subfields of our catalog.&lt;/p&gt;

&lt;p&gt;The top twenty most common entries using those normalizations are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;402537 pbk&lt;/li&gt;
  &lt;li&gt;387406 alk. paper&lt;/li&gt;
  &lt;li&gt;99260 v  # &lt;em&gt;(e.g., “v. 1”, “v. 22”, etc.)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;82918 cloth&lt;/li&gt;
  &lt;li&gt;51125 hbk&lt;/li&gt;
  &lt;li&gt;42036 electronic bk&lt;/li&gt;
  &lt;li&gt;41360 acid-free paper&lt;/li&gt;
  &lt;li&gt;38792 hardcover&lt;/li&gt;
  &lt;li&gt;28913 set&lt;/li&gt;
  &lt;li&gt;20358 hardback&lt;/li&gt;
  &lt;li&gt;19160 ebook&lt;/li&gt;
  &lt;li&gt;16264 paper&lt;/li&gt;
  &lt;li&gt;15269 u.s&lt;/li&gt;
  &lt;li&gt;12770 hd.bd&lt;/li&gt;
  &lt;li&gt;11793 print&lt;/li&gt;
  &lt;li&gt;10625 lib. bdg&lt;/li&gt;
  &lt;li&gt;10520 hc&lt;/li&gt;
  &lt;li&gt;8772 est&lt;/li&gt;
  &lt;li&gt;7767 pb&lt;/li&gt;
  &lt;li&gt;7639 hard&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The kicker? These are the top twenty of &lt;em&gt;13,374&lt;/em&gt; unique parenthetical strings found in the 020 field. Many of them are publishers, or cities, or whatnot, but an awful lot of them are variations on “hardcover” and “paperback.”&lt;/p&gt;

&lt;p&gt;For example, a quick search for anything that might be “hard” (regexp: /h[ar]{0,2}d/) got me started on a list. Here’s just the 90 examples from that list that start with ‘h’:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;hard | hard adhesive | hard back | hard bd | hard book | hard bound | hard bound book | hard boundhard case | hard casehard copy | hard copy | hard copy set | hard cov | hard cover | hard covers | hard sewn | hard signed | hard-backhard-backcased | hard-bound | hard-cover | hard-cover acid-free | hardb | hard\cover | hardbach | hardback | hardback book | hardback cover |  hardbackcased | hardbd | hardbk | hardbond | hardbook | hardboubd | hardbound | hardboundhardboundtion | hardc | hardcase | hardcopy | hardcopy publication | hardcov | hardcov er | hardcovcer | hardcove | hardcover | hardcover-alk. paper | hardcovercloth | hardcoverflexibound | hardcoverhardcoverwith cd | hardcoverr | hardcovers | hardcoversame | hardcoversame as above | hardcoverset | hardcovertion | hardcver | hardcvoer | hardcvr | harddback | harde | hardocover | hardover | hardpack | hardpaper | hardvocer | hardware | hd | hd bd | hd. bd | hd. bd. in slip case | hd. bd.in sl.cs | hd. bk | hd. cover | hd.bd | hd.bd. in box | hdb | hdbd | hdbk | hdbkb | hdbkhdbk | hdbnd | hdc | hdcvr | hdk | hdp | hdpk | hradback | hradcover | hrd | hrdbk | hrdcver | hrdcvr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s after eliminating things like places of publication, strings like  “with…”, “plus…”, “alk. paper”, etc.&lt;/p&gt;

&lt;h3 id=&quot;yeah-but-you-have-to-understand-that-historically&quot;&gt;“Yeah, but you have to understand that historically…”&lt;/h3&gt;

&lt;p&gt;Stop hiding behind that.&lt;/p&gt;

&lt;p&gt;I understand that at one point in time it probably made sense (to someone at least) to do it this way. I can deal with that.&lt;/p&gt;

&lt;p&gt;What I can’t accept is that &lt;em&gt;as I type this&lt;/em&gt; there’s a cataloger doing this in this way. Today. April 2011. Some, what? maybe &lt;em&gt;thirty years&lt;/em&gt; since computer-based OPACs became prevalent?&lt;/p&gt;

&lt;p&gt;These sorts of problems were recognized &lt;em&gt;ages&lt;/em&gt; ago and should have been dealt with. Add a subfield. Invent a controlled vocabulary. Don’t worry about the legacy data; it’s always going to suck.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;why are we still producing sucky data???&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;to-sum-up&quot;&gt;To sum up&lt;/h3&gt;

&lt;p&gt;The point is that there’s a better way to do this stuff. Lots and lots of better ways, in fact. Time I spend dealing with crappy data is time I &lt;em&gt;don’t&lt;/em&gt; spend making relevancy raking better, or building a better command language search option for my librarians, or working on ways to get a decent “more like this”.&lt;/p&gt;

&lt;p&gt;The need is both dire and urgent; the latter because sooner or later we’re going to have to go to a “two state solution” with traditional MARC21 for many of our records and whatever comes next (RDA?) for the newer stuff. And every day we wait, that first category grows, and the growth rate keeps increasing.&lt;/p&gt;

&lt;p&gt;And then there’s serials. Don’t talk to me about serials.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2011 00:00:00 -0400</pubDate>
        <link>http://robotlibrarian.billdueber.com/2011/04/isbn-parenthetical-notes-bad-marc-data-1/</link>
        <guid isPermaLink="true">http://robotlibrarian.billdueber.com/2011/04/isbn-parenthetical-notes-bad-marc-data-1/</guid>
        
        <category>bad</category>
        
        <category>data</category>
        
        
      </item>
    
  </channel>
</rss>
